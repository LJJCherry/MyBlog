{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpeg","path":"images/alipay.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpeg","path":"images/wechatpay.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1488536657000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1488536657000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1488536657000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1488536657000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1488536657000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1488536657000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1488536657000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1488536657000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1488536657000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1488536657000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1488536657000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1488536657000},{"_id":"themes/next/gulpfile.coffee","hash":"933e6d29eb82522cff0df209d52b935e91b1111c","modified":1488536657000},{"_id":"themes/next/_config.yml","hash":"be672769549519d16e5004b0a8836fb21e83678f","modified":1496994126000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1488536657000},{"_id":"source/_posts/2017-02-21-Linux常用命令.md","hash":"3fc9cf434109331c915a208d418df711345ce578","modified":1495442037000},{"_id":"source/_posts/2017-02-21-Mac定时任务.md","hash":"b2c31919a956a96df24ab7c0a7fa1bda145072d0","modified":1488782636000},{"_id":"source/_posts/2017-02-21-Markdown语法示例.md","hash":"cc57cf0d4001abed043611c3107540ed244a1762","modified":1496998929000},{"_id":"source/_posts/2017-06-09-React生命周期.md","hash":"b4b09fb1c10f7f9da6e82497b62a22bdd0dae95f","modified":1496994856000},{"_id":"source/_posts/gulp的使用.md","hash":"c8a68700a52e67cff058aa7bca444436887ff4ea","modified":1488853081000},{"_id":"source/_posts/全面解析JavaScript中&&和||.md","hash":"9ba95cb6932d6eee8bde2b7711254327b30c3be0","modified":1488790676000},{"_id":"source/tags/index.md","hash":"455b59e6238a5c76e446cc66ab1358dde3c51f33","modified":1488794477000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1488536657000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1488536657000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1488536638000},{"_id":"themes/next/.git/index","hash":"1954ac7a64f5f575fec9a004176e257bff0b2c15","modified":1488781556000},{"_id":"themes/next/.git/packed-refs","hash":"15d1c7f7b4e74891a49d4e1b9e43dd6d54646e99","modified":1488536657000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1488536657000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1488536657000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1488536657000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1488536657000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1488536657000},{"_id":"themes/next/languages/fr-FR.yml","hash":"e98f1558347752a20019b71f0b1f9c8be1b34f42","modified":1488536657000},{"_id":"themes/next/languages/en.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1488536657000},{"_id":"themes/next/languages/default.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1488536657000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1488536657000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1488536657000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1488536657000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1488536657000},{"_id":"themes/next/languages/ru.yml","hash":"5022885d8955e1b91d8841048db272bf99c59a76","modified":1488536657000},{"_id":"themes/next/languages/zh-hk.yml","hash":"19c23d21f262e24c06ee6ddfd51d2a6585304f88","modified":1488536657000},{"_id":"themes/next/languages/zh-tw.yml","hash":"68407799271c78ecc07f03d238257dd8c65ad42d","modified":1488536657000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1488536657000},{"_id":"themes/next/layout/_layout.swig","hash":"2c0c3547a5b470024326a33ae2779d5ee0252266","modified":1488536657000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"40d01dc46d57f71c2ef635c45b295d4355456e90","modified":1488536657000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1488536657000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1488536657000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1488536657000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1488536657000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1488536657000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1488536657000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1488536657000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1488536657000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1488536657000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1488536657000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488536657000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1488536638000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1488536638000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1488536638000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1488536638000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1488536638000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1488536638000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1488536638000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1488536638000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1488536638000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1488536638000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1488536638000},{"_id":"themes/next/.git/logs/HEAD","hash":"f5ccf9d79045ea7cc139d28a8d29858f82a97538","modified":1488536657000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1488536657000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1488536657000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"79378f3a1cd90518b07808ed09156a3ab55ffa31","modified":1488536657000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1488536657000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1488536657000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1488536657000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488536657000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488536657000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1488536657000},{"_id":"themes/next/layout/_macro/post.swig","hash":"2c2efe44ea013030f3ce5da7bfdeddb74489eb6e","modified":1488536657000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1488536657000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"911b99ba0445b2c07373128d87a4ef2eb7de341a","modified":1488536657000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1488536657000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1488536657000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1488536657000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1488536657000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1488536657000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1488536657000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1488536657000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1488536657000},{"_id":"themes/next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1488536657000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1488536657000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1488536657000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1488536657000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1488536657000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1488536657000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1488536657000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1488536657000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1488536657000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1488536657000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1488536657000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1488536657000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1488536657000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1488536657000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1488536657000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488536657000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1488536657000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488536657000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1488536657000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1488536657000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488536657000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488536657000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488536657000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488536657000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488536657000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488536657000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488536657000},{"_id":"themes/next/source/images/alipay.jpeg","hash":"30f521347a746dc9a67c116205b01952574b1487","modified":1488775917000},{"_id":"themes/next/source/images/avatar.jpeg","hash":"fef18b70cd5cf161ed0d561ed4c6709153ee9b93","modified":1488781464000},{"_id":"themes/next/.git/refs/heads/master","hash":"660490d92f0b4eb073d3643f0243e479d0a8bb25","modified":1488536657000},{"_id":"themes/next/.git/objects/36/2e1bb36bbf36e71268b4384623f0106deda0cd","hash":"ad321ddfaa92d8799f556b4a9b9df6e1d598886d","modified":1488772965000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1488536657000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1488536657000},{"_id":"themes/next/.git/objects/ae/08897c9556aa4a12b3163aefafc9643fecab2c","hash":"f65f4124a546ca1efb6f42f4d806f4b6bff6eb1c","modified":1488773435000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1488536657000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1488536657000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1488536657000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1488536657000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1488536657000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1488536657000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1488536657000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1488536657000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1488536657000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1488536657000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1488536657000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1488536657000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1488536657000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1488536657000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1488536657000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1488536657000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e7c76d93605e2b685274400afe51c55cc651486e","modified":1488536657000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1488536657000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1488536657000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1488536657000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1488536657000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1488536657000},{"_id":"themes/next/source/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1488536657000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1488536657000},{"_id":"themes/next/source/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1488536657000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1488536657000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1488536657000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1488536657000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1488536657000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1488536657000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1488536657000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1488536657000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1488536657000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1488536657000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1488536657000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1488536657000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1488536657000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1488536657000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1488536657000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1488536657000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1488536657000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1488536657000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1488536657000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1488536657000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1488536657000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1488536657000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1488536657000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1488536657000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1488536657000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1488536657000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1488536657000},{"_id":"themes/next/.git/objects/aa/716b3b371365ed96d78483b04a02f1e8251cfd","hash":"68c07f6337d166679812343a91ca8be9f45e8b31","modified":1488770837000},{"_id":"themes/next/.git/objects/3c/3932c3cb1156f2ebc88a70f8bffefd597d358d","hash":"723eb2869d3c00909be17cfc8144a5548426f23b","modified":1488781556000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1488536657000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"f5ccf9d79045ea7cc139d28a8d29858f82a97538","modified":1488536657000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1488536657000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1488536657000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1488536657000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1488536657000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1488536657000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1488536657000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1488536657000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1488536657000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1488536657000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1488536657000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1488536657000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1488536657000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1488536657000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488536657000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1488536657000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1488536657000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1488536657000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1488536657000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488536657000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1488536657000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1488536657000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f15537cee1a9ef4fa1e72a1670ebce4097db8115","modified":1488536657000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1488536657000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1488536657000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1488536657000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1488536657000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1488536657000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488536657000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488536657000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488536657000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488536657000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488536657000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1488536657000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1488536657000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488536657000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1488536657000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1488536657000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1488536657000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1488536657000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1488536657000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1488536657000},{"_id":"themes/next/source/images/wechatpay.jpeg","hash":"cccbe47fb96e8b5371ced44974ea6fc70ea14ab7","modified":1488776086000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1488536657000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1488536657000},{"_id":"themes/next/.git/objects/pack/pack-9bbc1f274cf3619c4b74bf732f86915fcf5d7603.idx","hash":"489b3b6c48757ed37151e2de38bbdc5403230058","modified":1488536657000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1488536657000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1488536657000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1488536657000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"f5ccf9d79045ea7cc139d28a8d29858f82a97538","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8fe1e55bc290e6aaf07cc644fe27b62107a272a8","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1488536657000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1488536657000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488536657000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1488536657000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488536657000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488536657000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488536657000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1488536657000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1488536657000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488536657000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1488536657000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1488536657000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1488536657000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1488536657000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1488536657000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1488536657000},{"_id":"themes/next/.git/objects/pack/pack-9bbc1f274cf3619c4b74bf732f86915fcf5d7603.pack","hash":"09005448fd944edf450a56ee2a28ef122e64d416","modified":1488536657000},{"_id":"public/tags/index.html","hash":"56055c62d077283161cb8b3fec794043b6541d3e","modified":1496999877355},{"_id":"public/2017/03/06/2017-02-21-Mac定时任务/index.html","hash":"6ac09212b8dc76c7761fc6a3b8781735ce24959b","modified":1496999877359},{"_id":"public/2017/03/06/全面解析JavaScript中&&和||/index.html","hash":"374e6ee5555b7b2250116c9a6de1c8d925ba8183","modified":1496999877359},{"_id":"public/archives/index.html","hash":"bd7b3d2c9fd1ff04443b6008696c746d6c029294","modified":1496999877359},{"_id":"public/archives/2017/index.html","hash":"4c09e84392ef42b3a0489fc6d40bdb7ecb53b1ad","modified":1496999877359},{"_id":"public/2017/06/09/2017-02-21-Markdown语法示例/index.html","hash":"d7e5bd2c1ed06fb78b5b8dc8230b9af62648ce73","modified":1496999877359},{"_id":"public/2017/05/22/2017-02-21-Linux常用命令/index.html","hash":"ce1864a88c367872c1d1d1a62efc992ed29f96de","modified":1496999877359},{"_id":"public/2017/03/07/gulp的使用/index.html","hash":"06c5f7ad89ff380244dc508ca06d8c6c83530950","modified":1496999877359},{"_id":"public/archives/2017/03/index.html","hash":"a6590c0748e2237890e647a62c9d61cd57bf2aad","modified":1496999877362},{"_id":"public/archives/2017/05/index.html","hash":"d34d59aa6ae27a7eb99c3d2f71c5330e50a3dafa","modified":1496999877362},{"_id":"public/archives/2017/06/index.html","hash":"4e0b1672e59c87a81adf8484ca2fa8ff86ec5274","modified":1496999877362},{"_id":"public/tags/Linux/index.html","hash":"2f7a0fb582a7af8974e74a9e18b542a862c21e28","modified":1496999877362},{"_id":"public/tags/Mac/index.html","hash":"4d05f223467ddcd43d332db2858af5b25e2f1760","modified":1496999877362},{"_id":"public/tags/gulp/index.html","hash":"dd78efa3d7545f9eb2629ff5ead3070a41e7bec5","modified":1496999877362},{"_id":"public/tags/JavaScript/index.html","hash":"ce086ce0f4da1a58316882249ae3b33559292362","modified":1496999877362},{"_id":"public/tags/React/index.html","hash":"53b53ba1eefe28f28fc284e41a6f139b56ce515a","modified":1496999877362},{"_id":"public/index.html","hash":"5394165ffe62fca115ded1bd6aeb0645d084c547","modified":1496999877362},{"_id":"public/2017/06/09/2017-06-09-React生命周期/index.html","hash":"7c839ecfa967908f2ecb9c0b9fecee22978b13ca","modified":1496999877362}],"Category":[],"Data":[],"Page":[{"date":"2017-03-06T09:57:15.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ndate: 2017-03-06 17:57:15\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-03-06T10:01:17.000Z","path":"tags/index.html","title":"","layout":"page","_id":"cj3pb2kfb000e8ms62qo6eqqk","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Linux常用命令","_content":"1、cd命令    切换目录\n\n2、ls命令   查看当前目录下的文件\n\n      ls -a   列出全部的文件，连同隐藏文件（开头为.的文件）一起列出来（常用）\n\n3、mkdir命令  创建一个文件夹的命令\n   touch命令  创建一个文件\n<!-- more -->\n\n4、cp命令 该命令用于复制文件，copy之意，它还可以把多个文件一次性地复制到一个目录下\n   `cp 文件名 目录名`\n\n    cp testVim ljj 将testVim文件复制到ljj文件夹下\n\n* -a ：将文件的特性一起复制\n* -p ：连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份\n* -i ：若目标文件已经存在时，在覆盖时会先询问操作的进行\n* -r ：递归持续复制，用于目录的复制行为\n* -u ：目标文件与源文件有差异时才会复制\n\n> 例如\n `cp -a file1 file2` #连同文件的所有特性把文件file1复制成文件file2\n `cp file1 file2 file3 dir` #把文件file1、file2、file3复制到目录dir中\n\n5、grep命令\n\n该命令常用于分析一行的信息，若当中有我们所需要的信息，就将该行显示出来，该命令通常与管道命令一起使用，用于对一些命令的输出进行筛选加工等等，它的简单语法为\n\n     grep [-acinv] [--color=auto] '查找字符串' filename\n\n* -a ：将binary文件以text文件的方式查找数据\n* -c ：计算找到‘查找字符串’的次数\n* -i ：忽略大小写的区别，即把大小写视为相同\n* -v ：反向选择，即显示出没有‘查找字符串’内容的那一行\n\n> 例如：\n 取出文件/etc/man.config中包含MANPATH的行，并把找到的关键字加上颜色\n   `grep --color=auto 'MANPATH' /etc/man.config`\n  # 把 ls -l的输出中包含字母file（不区分大小写）的内容输出\n  `ls -l | grep -i file`\n\n5、find命令\nfind是一个基于查找的功能非常强大的命令\n\n    find [PATH] [option] [action]\n\n # 与时间有关的参数：\n* -mtime n : n为数字，意思为在n天之前的“一天内”被更改过的文件；\n* -mtime +n : 列出在n天之前（不含n天本身）被更改过的文件名；\n* -mtime -n : 列出在n天之内（含n天本身）被更改过的文件名；\n* -newer file : 列出比file还要新的文件名\n\n> 例如：\n  `find /root -mtime 0` # 在当前目录下查找今天之内有改动的文件\n\n # 与用户或用户组名有关的参数：\n*  -user name : 列出文件所有者为name的文件\n*  -group name : 列出文件所属用户组为name的文件\n*  -uid n : 列出文件所有者为用户ID为n的文件\n*  -gid n : 列出文件所属用户组为用户组ID为n的文件\n\n> 例如：\n  `find /home/ljianhui -user ljianhui` # 在目录/home/ljianhui中找出所有者为ljianhui的文件\n\n  # 与文件权限及名称有关的参数：\n*  -name filename ：找出文件名为filename的文件\n*  -size [+-]SIZE ：找出比SIZE还要大（+）或小（-）的文件\n*  -tpye TYPE ：查找文件的类型为TYPE的文件，TYPE的值主要有：一般文件（f)、设备文件（b、c）、目录（d）、连接文件（l）、socket（s）、FIFO管道文件（p）；\n*  -perm mode ：查找文件权限刚好等于mode的文件，mode用数字表示，如0755；\n*  -perm -mode ：查找文件权限必须要全部包括mode权限的文件，mode用数字表示\n*  -perm +mode ：查找文件权限包含任一mode的权限的文件，mode用数字表示\n\n> 例如：\n   `find / -name passwd` # 查找文件名为passwd的文件\n   `find . -perm 0755` # 查找当前目录中文件权限的0755的文件\n   `find . -size +12k` # 查找当前目录中大于12KB的文件，注意c表示byte","source":"_posts/2017-02-21-Linux常用命令.md","raw":"---\ntitle:  \"Linux常用命令\"\ntags: Linux\n---\n1、cd命令    切换目录\n\n2、ls命令   查看当前目录下的文件\n\n      ls -a   列出全部的文件，连同隐藏文件（开头为.的文件）一起列出来（常用）\n\n3、mkdir命令  创建一个文件夹的命令\n   touch命令  创建一个文件\n<!-- more -->\n\n4、cp命令 该命令用于复制文件，copy之意，它还可以把多个文件一次性地复制到一个目录下\n   `cp 文件名 目录名`\n\n    cp testVim ljj 将testVim文件复制到ljj文件夹下\n\n* -a ：将文件的特性一起复制\n* -p ：连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份\n* -i ：若目标文件已经存在时，在覆盖时会先询问操作的进行\n* -r ：递归持续复制，用于目录的复制行为\n* -u ：目标文件与源文件有差异时才会复制\n\n> 例如\n `cp -a file1 file2` #连同文件的所有特性把文件file1复制成文件file2\n `cp file1 file2 file3 dir` #把文件file1、file2、file3复制到目录dir中\n\n5、grep命令\n\n该命令常用于分析一行的信息，若当中有我们所需要的信息，就将该行显示出来，该命令通常与管道命令一起使用，用于对一些命令的输出进行筛选加工等等，它的简单语法为\n\n     grep [-acinv] [--color=auto] '查找字符串' filename\n\n* -a ：将binary文件以text文件的方式查找数据\n* -c ：计算找到‘查找字符串’的次数\n* -i ：忽略大小写的区别，即把大小写视为相同\n* -v ：反向选择，即显示出没有‘查找字符串’内容的那一行\n\n> 例如：\n 取出文件/etc/man.config中包含MANPATH的行，并把找到的关键字加上颜色\n   `grep --color=auto 'MANPATH' /etc/man.config`\n  # 把 ls -l的输出中包含字母file（不区分大小写）的内容输出\n  `ls -l | grep -i file`\n\n5、find命令\nfind是一个基于查找的功能非常强大的命令\n\n    find [PATH] [option] [action]\n\n # 与时间有关的参数：\n* -mtime n : n为数字，意思为在n天之前的“一天内”被更改过的文件；\n* -mtime +n : 列出在n天之前（不含n天本身）被更改过的文件名；\n* -mtime -n : 列出在n天之内（含n天本身）被更改过的文件名；\n* -newer file : 列出比file还要新的文件名\n\n> 例如：\n  `find /root -mtime 0` # 在当前目录下查找今天之内有改动的文件\n\n # 与用户或用户组名有关的参数：\n*  -user name : 列出文件所有者为name的文件\n*  -group name : 列出文件所属用户组为name的文件\n*  -uid n : 列出文件所有者为用户ID为n的文件\n*  -gid n : 列出文件所属用户组为用户组ID为n的文件\n\n> 例如：\n  `find /home/ljianhui -user ljianhui` # 在目录/home/ljianhui中找出所有者为ljianhui的文件\n\n  # 与文件权限及名称有关的参数：\n*  -name filename ：找出文件名为filename的文件\n*  -size [+-]SIZE ：找出比SIZE还要大（+）或小（-）的文件\n*  -tpye TYPE ：查找文件的类型为TYPE的文件，TYPE的值主要有：一般文件（f)、设备文件（b、c）、目录（d）、连接文件（l）、socket（s）、FIFO管道文件（p）；\n*  -perm mode ：查找文件权限刚好等于mode的文件，mode用数字表示，如0755；\n*  -perm -mode ：查找文件权限必须要全部包括mode权限的文件，mode用数字表示\n*  -perm +mode ：查找文件权限包含任一mode的权限的文件，mode用数字表示\n\n> 例如：\n   `find / -name passwd` # 查找文件名为passwd的文件\n   `find . -perm 0755` # 查找当前目录中文件权限的0755的文件\n   `find . -size +12k` # 查找当前目录中大于12KB的文件，注意c表示byte","slug":"2017-02-21-Linux常用命令","published":1,"date":"2017-05-22T08:33:57.000Z","updated":"2017-05-22T08:33:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3pb2k7r00008ms6bsj0r89i","content":"<p>1、cd命令    切换目录</p>\n<p>2、ls命令   查看当前目录下的文件</p>\n<pre><code>ls -a   列出全部的文件，连同隐藏文件（开头为.的文件）一起列出来（常用）\n</code></pre><p>3、mkdir命令  创建一个文件夹的命令<br>   touch命令  创建一个文件<br><a id=\"more\"></a></p>\n<p>4、cp命令 该命令用于复制文件，copy之意，它还可以把多个文件一次性地复制到一个目录下<br>   <code>cp 文件名 目录名</code></p>\n<pre><code>cp testVim ljj 将testVim文件复制到ljj文件夹下\n</code></pre><ul>\n<li>-a ：将文件的特性一起复制</li>\n<li>-p ：连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份</li>\n<li>-i ：若目标文件已经存在时，在覆盖时会先询问操作的进行</li>\n<li>-r ：递归持续复制，用于目录的复制行为</li>\n<li>-u ：目标文件与源文件有差异时才会复制</li>\n</ul>\n<blockquote>\n<p>例如<br> <code>cp -a file1 file2</code> #连同文件的所有特性把文件file1复制成文件file2<br> <code>cp file1 file2 file3 dir</code> #把文件file1、file2、file3复制到目录dir中</p>\n</blockquote>\n<p>5、grep命令</p>\n<p>该命令常用于分析一行的信息，若当中有我们所需要的信息，就将该行显示出来，该命令通常与管道命令一起使用，用于对一些命令的输出进行筛选加工等等，它的简单语法为</p>\n<pre><code>grep [-acinv] [--color=auto] &apos;查找字符串&apos; filename\n</code></pre><ul>\n<li>-a ：将binary文件以text文件的方式查找数据</li>\n<li>-c ：计算找到‘查找字符串’的次数</li>\n<li>-i ：忽略大小写的区别，即把大小写视为相同</li>\n<li>-v ：反向选择，即显示出没有‘查找字符串’内容的那一行</li>\n</ul>\n<blockquote>\n<p>例如：<br> 取出文件/etc/man.config中包含MANPATH的行，并把找到的关键字加上颜色<br>   <code>grep --color=auto &#39;MANPATH&#39; /etc/man.config</code></p>\n<h1 id=\"把-ls-l的输出中包含字母file（不区分大小写）的内容输出\"><a href=\"#把-ls-l的输出中包含字母file（不区分大小写）的内容输出\" class=\"headerlink\" title=\"把 ls -l的输出中包含字母file（不区分大小写）的内容输出\"></a>把 ls -l的输出中包含字母file（不区分大小写）的内容输出</h1><p>  <code>ls -l | grep -i file</code></p>\n</blockquote>\n<p>5、find命令<br>find是一个基于查找的功能非常强大的命令</p>\n<pre><code>find [PATH] [option] [action]\n</code></pre><h1 id=\"与时间有关的参数：\"><a href=\"#与时间有关的参数：\" class=\"headerlink\" title=\"与时间有关的参数：\"></a>与时间有关的参数：</h1><ul>\n<li>-mtime n : n为数字，意思为在n天之前的“一天内”被更改过的文件；</li>\n<li>-mtime +n : 列出在n天之前（不含n天本身）被更改过的文件名；</li>\n<li>-mtime -n : 列出在n天之内（含n天本身）被更改过的文件名；</li>\n<li>-newer file : 列出比file还要新的文件名</li>\n</ul>\n<blockquote>\n<p>例如：<br>  <code>find /root -mtime 0</code> # 在当前目录下查找今天之内有改动的文件</p>\n</blockquote>\n<h1 id=\"与用户或用户组名有关的参数：\"><a href=\"#与用户或用户组名有关的参数：\" class=\"headerlink\" title=\"与用户或用户组名有关的参数：\"></a>与用户或用户组名有关的参数：</h1><ul>\n<li>-user name : 列出文件所有者为name的文件</li>\n<li>-group name : 列出文件所属用户组为name的文件</li>\n<li>-uid n : 列出文件所有者为用户ID为n的文件</li>\n<li>-gid n : 列出文件所属用户组为用户组ID为n的文件</li>\n</ul>\n<blockquote>\n<p>例如：<br>  <code>find /home/ljianhui -user ljianhui</code> # 在目录/home/ljianhui中找出所有者为ljianhui的文件</p>\n</blockquote>\n<h1 id=\"与文件权限及名称有关的参数：\"><a href=\"#与文件权限及名称有关的参数：\" class=\"headerlink\" title=\"与文件权限及名称有关的参数：\"></a>与文件权限及名称有关的参数：</h1><ul>\n<li>-name filename ：找出文件名为filename的文件</li>\n<li>-size [+-]SIZE ：找出比SIZE还要大（+）或小（-）的文件</li>\n<li>-tpye TYPE ：查找文件的类型为TYPE的文件，TYPE的值主要有：一般文件（f)、设备文件（b、c）、目录（d）、连接文件（l）、socket（s）、FIFO管道文件（p）；</li>\n<li>-perm mode ：查找文件权限刚好等于mode的文件，mode用数字表示，如0755；</li>\n<li>-perm -mode ：查找文件权限必须要全部包括mode权限的文件，mode用数字表示</li>\n<li>-perm +mode ：查找文件权限包含任一mode的权限的文件，mode用数字表示</li>\n</ul>\n<blockquote>\n<p>例如：<br>   <code>find / -name passwd</code> # 查找文件名为passwd的文件<br>   <code>find . -perm 0755</code> # 查找当前目录中文件权限的0755的文件<br>   <code>find . -size +12k</code> # 查找当前目录中大于12KB的文件，注意c表示byte</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>1、cd命令    切换目录</p>\n<p>2、ls命令   查看当前目录下的文件</p>\n<pre><code>ls -a   列出全部的文件，连同隐藏文件（开头为.的文件）一起列出来（常用）\n</code></pre><p>3、mkdir命令  创建一个文件夹的命令<br>   touch命令  创建一个文件<br>","more":"</p>\n<p>4、cp命令 该命令用于复制文件，copy之意，它还可以把多个文件一次性地复制到一个目录下<br>   <code>cp 文件名 目录名</code></p>\n<pre><code>cp testVim ljj 将testVim文件复制到ljj文件夹下\n</code></pre><ul>\n<li>-a ：将文件的特性一起复制</li>\n<li>-p ：连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份</li>\n<li>-i ：若目标文件已经存在时，在覆盖时会先询问操作的进行</li>\n<li>-r ：递归持续复制，用于目录的复制行为</li>\n<li>-u ：目标文件与源文件有差异时才会复制</li>\n</ul>\n<blockquote>\n<p>例如<br> <code>cp -a file1 file2</code> #连同文件的所有特性把文件file1复制成文件file2<br> <code>cp file1 file2 file3 dir</code> #把文件file1、file2、file3复制到目录dir中</p>\n</blockquote>\n<p>5、grep命令</p>\n<p>该命令常用于分析一行的信息，若当中有我们所需要的信息，就将该行显示出来，该命令通常与管道命令一起使用，用于对一些命令的输出进行筛选加工等等，它的简单语法为</p>\n<pre><code>grep [-acinv] [--color=auto] &apos;查找字符串&apos; filename\n</code></pre><ul>\n<li>-a ：将binary文件以text文件的方式查找数据</li>\n<li>-c ：计算找到‘查找字符串’的次数</li>\n<li>-i ：忽略大小写的区别，即把大小写视为相同</li>\n<li>-v ：反向选择，即显示出没有‘查找字符串’内容的那一行</li>\n</ul>\n<blockquote>\n<p>例如：<br> 取出文件/etc/man.config中包含MANPATH的行，并把找到的关键字加上颜色<br>   <code>grep --color=auto &#39;MANPATH&#39; /etc/man.config</code></p>\n<h1 id=\"把-ls-l的输出中包含字母file（不区分大小写）的内容输出\"><a href=\"#把-ls-l的输出中包含字母file（不区分大小写）的内容输出\" class=\"headerlink\" title=\"把 ls -l的输出中包含字母file（不区分大小写）的内容输出\"></a>把 ls -l的输出中包含字母file（不区分大小写）的内容输出</h1><p>  <code>ls -l | grep -i file</code></p>\n</blockquote>\n<p>5、find命令<br>find是一个基于查找的功能非常强大的命令</p>\n<pre><code>find [PATH] [option] [action]\n</code></pre><h1 id=\"与时间有关的参数：\"><a href=\"#与时间有关的参数：\" class=\"headerlink\" title=\"与时间有关的参数：\"></a>与时间有关的参数：</h1><ul>\n<li>-mtime n : n为数字，意思为在n天之前的“一天内”被更改过的文件；</li>\n<li>-mtime +n : 列出在n天之前（不含n天本身）被更改过的文件名；</li>\n<li>-mtime -n : 列出在n天之内（含n天本身）被更改过的文件名；</li>\n<li>-newer file : 列出比file还要新的文件名</li>\n</ul>\n<blockquote>\n<p>例如：<br>  <code>find /root -mtime 0</code> # 在当前目录下查找今天之内有改动的文件</p>\n</blockquote>\n<h1 id=\"与用户或用户组名有关的参数：\"><a href=\"#与用户或用户组名有关的参数：\" class=\"headerlink\" title=\"与用户或用户组名有关的参数：\"></a>与用户或用户组名有关的参数：</h1><ul>\n<li>-user name : 列出文件所有者为name的文件</li>\n<li>-group name : 列出文件所属用户组为name的文件</li>\n<li>-uid n : 列出文件所有者为用户ID为n的文件</li>\n<li>-gid n : 列出文件所属用户组为用户组ID为n的文件</li>\n</ul>\n<blockquote>\n<p>例如：<br>  <code>find /home/ljianhui -user ljianhui</code> # 在目录/home/ljianhui中找出所有者为ljianhui的文件</p>\n</blockquote>\n<h1 id=\"与文件权限及名称有关的参数：\"><a href=\"#与文件权限及名称有关的参数：\" class=\"headerlink\" title=\"与文件权限及名称有关的参数：\"></a>与文件权限及名称有关的参数：</h1><ul>\n<li>-name filename ：找出文件名为filename的文件</li>\n<li>-size [+-]SIZE ：找出比SIZE还要大（+）或小（-）的文件</li>\n<li>-tpye TYPE ：查找文件的类型为TYPE的文件，TYPE的值主要有：一般文件（f)、设备文件（b、c）、目录（d）、连接文件（l）、socket（s）、FIFO管道文件（p）；</li>\n<li>-perm mode ：查找文件权限刚好等于mode的文件，mode用数字表示，如0755；</li>\n<li>-perm -mode ：查找文件权限必须要全部包括mode权限的文件，mode用数字表示</li>\n<li>-perm +mode ：查找文件权限包含任一mode的权限的文件，mode用数字表示</li>\n</ul>\n<blockquote>\n<p>例如：<br>   <code>find / -name passwd</code> # 查找文件名为passwd的文件<br>   <code>find . -perm 0755</code> # 查找当前目录中文件权限的0755的文件<br>   <code>find . -size +12k</code> # 查找当前目录中大于12KB的文件，注意c表示byte</p>\n</blockquote>"},{"title":"Mac定时任务","_content":"使用Crontab实现定时任务    \n1、编辑crontab文件：   \n    `crontab -e`     \n2、列出crontab文件    \n<!-- more --> \n   `crontab -l`     \n3、crontab文件格式       \n`* * * * * myCommand`(分别代表：`分 时 日 月 星期 要运行的命令`)       \n4、crontab输出日志     \n`* * * * * myCommand>>logpath`       \n[参考资料](http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html)","source":"_posts/2017-02-21-Mac定时任务.md","raw":"---\ntitle:  \"Mac定时任务\"\ntag: Mac\n---\n使用Crontab实现定时任务    \n1、编辑crontab文件：   \n    `crontab -e`     \n2、列出crontab文件    \n<!-- more --> \n   `crontab -l`     \n3、crontab文件格式       \n`* * * * * myCommand`(分别代表：`分 时 日 月 星期 要运行的命令`)       \n4、crontab输出日志     \n`* * * * * myCommand>>logpath`       \n[参考资料](http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html)","slug":"2017-02-21-Mac定时任务","published":1,"date":"2017-03-06T06:43:56.000Z","updated":"2017-03-06T06:43:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3pb2k7w00018ms63wc7ygbp","content":"<p>使用Crontab实现定时任务<br>1、编辑crontab文件：<br>    <code>crontab -e</code><br>2、列出crontab文件<br><a id=\"more\"></a><br>   <code>crontab -l</code><br>3、crontab文件格式<br><code>* * * * * myCommand</code>(分别代表：<code>分 时 日 月 星期 要运行的命令</code>)<br>4、crontab输出日志<br><code>* * * * * myCommand&gt;&gt;logpath</code><br><a href=\"http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html\" target=\"_blank\" rel=\"external\">参考资料</a></p>\n","site":{"data":{}},"excerpt":"<p>使用Crontab实现定时任务<br>1、编辑crontab文件：<br>    <code>crontab -e</code><br>2、列出crontab文件<br>","more":"<br>   <code>crontab -l</code><br>3、crontab文件格式<br><code>* * * * * myCommand</code>(分别代表：<code>分 时 日 月 星期 要运行的命令</code>)<br>4、crontab输出日志<br><code>* * * * * myCommand&gt;&gt;logpath</code><br><a href=\"http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html\" target=\"_blank\" rel=\"external\">参考资料</a></p>"},{"title":"Markdown语法示例","_content":"### 强调效果\n**粗体效果（双星号）**  __粗体效果（双下划线）__\n\n\t**粗体效果（双星号）**  __粗体效果（双下划线）__\n*斜体效果（单星号在前）斜体效果（单星号在后）*\n\n\t*斜体效果（单星号在前）斜体效果（单星号在后）*\n_斜体效果（单下划线）_\n\n\t_斜体效果（单下划线）_\n\n### 分割线\n英文输入法下面三个下划线`___` ,必须单独成行\n___\n### 引用\n\n> 引用效果\n>> 引用中的引用\n>>>引用中的引用中的引用\n\n\n    ` > 引用效果\n      >> 引用中的引用\n      >>>引用中的引用中的引用\n\n### 标题\n大标题（标题下面三个=）\n===\n\n\t大标题（标题下面三个=）\n\t===\n小标题（标题下面三个-）\n---\n\t小标题（标题下面三个-）\n\t---\n# 一级标题（#）\n## 二级标题 （##）\n### 三级标题 （###）\n#### 四级标题 （####）\n##### 五级标题 （#####）\n###### 六级标题 （######）\n### 无序列表\n- 无序列表（符号之后有空格）`- 无序列表（符号之后有空格`\n* 无序列表 （- * +都可以） `* 无序列表(- * +都可以)`\n+ 无序列表   `+ 无序列表`\n\n### 有序列表\n1. 有序列表\n2. 有序列表\n3. 有序列表\n\n### 嵌套列表\n+ 嵌套列表（+*-可循环使用）\n   + 嵌套列表\n   + 嵌套列表\n     + 嵌套列表\n     + 嵌套列表\n\n### 文字超链接\n[百度](http://www.baidu.com)\n\n    [百度](http://www.baidu.com)\n    [百度](http://www.baidu.com \"百度\")\n### 图片超链接\n![GitHub Mark](http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png \"GitHub Mark\")\nTooltips可省略，要设置大小只能借助HTML标记\n### 索引超链接\n[Stepway's Notes][1]\n![GitHub Octocat][2]\n[1]:http://notes.stepway.me\n[2]:http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png\n### 自动链接\n<http://www.baidu.com>\n\n    <http://www.baidu.com>\n### 行内代码\n`var a = 'hello world'`\n\n    `var b = 'hello Markdown'`\n### 段落代码\n\t四个空格或者一个tab键\n\tvar a = ’hello world‘\n\tvar b = 'hello Markdown'\n### 注释\n### 转义字符\n### 表格\n\n\n\n\n\n\n","source":"_posts/2017-02-21-Markdown语法示例.md","raw":"---\ntitle:  \"Markdown语法示例\"\n---\n### 强调效果\n**粗体效果（双星号）**  __粗体效果（双下划线）__\n\n\t**粗体效果（双星号）**  __粗体效果（双下划线）__\n*斜体效果（单星号在前）斜体效果（单星号在后）*\n\n\t*斜体效果（单星号在前）斜体效果（单星号在后）*\n_斜体效果（单下划线）_\n\n\t_斜体效果（单下划线）_\n\n### 分割线\n英文输入法下面三个下划线`___` ,必须单独成行\n___\n### 引用\n\n> 引用效果\n>> 引用中的引用\n>>>引用中的引用中的引用\n\n\n    ` > 引用效果\n      >> 引用中的引用\n      >>>引用中的引用中的引用\n\n### 标题\n大标题（标题下面三个=）\n===\n\n\t大标题（标题下面三个=）\n\t===\n小标题（标题下面三个-）\n---\n\t小标题（标题下面三个-）\n\t---\n# 一级标题（#）\n## 二级标题 （##）\n### 三级标题 （###）\n#### 四级标题 （####）\n##### 五级标题 （#####）\n###### 六级标题 （######）\n### 无序列表\n- 无序列表（符号之后有空格）`- 无序列表（符号之后有空格`\n* 无序列表 （- * +都可以） `* 无序列表(- * +都可以)`\n+ 无序列表   `+ 无序列表`\n\n### 有序列表\n1. 有序列表\n2. 有序列表\n3. 有序列表\n\n### 嵌套列表\n+ 嵌套列表（+*-可循环使用）\n   + 嵌套列表\n   + 嵌套列表\n     + 嵌套列表\n     + 嵌套列表\n\n### 文字超链接\n[百度](http://www.baidu.com)\n\n    [百度](http://www.baidu.com)\n    [百度](http://www.baidu.com \"百度\")\n### 图片超链接\n![GitHub Mark](http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png \"GitHub Mark\")\nTooltips可省略，要设置大小只能借助HTML标记\n### 索引超链接\n[Stepway's Notes][1]\n![GitHub Octocat][2]\n[1]:http://notes.stepway.me\n[2]:http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png\n### 自动链接\n<http://www.baidu.com>\n\n    <http://www.baidu.com>\n### 行内代码\n`var a = 'hello world'`\n\n    `var b = 'hello Markdown'`\n### 段落代码\n\t四个空格或者一个tab键\n\tvar a = ’hello world‘\n\tvar b = 'hello Markdown'\n### 注释\n### 转义字符\n### 表格\n\n\n\n\n\n\n","slug":"2017-02-21-Markdown语法示例","published":1,"date":"2017-06-09T09:02:09.000Z","updated":"2017-06-09T09:02:09.000Z","_id":"cj3pb2k8w00068ms6ezltoa31","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"强调效果\"><a href=\"#强调效果\" class=\"headerlink\" title=\"强调效果\"></a>强调效果</h3><p><strong>粗体效果（双星号）</strong>  <strong>粗体效果（双下划线）</strong></p>\n<pre><code>**粗体效果（双星号）**  __粗体效果（双下划线）__\n</code></pre><p><em>斜体效果（单星号在前）斜体效果（单星号在后）</em></p>\n<pre><code>*斜体效果（单星号在前）斜体效果（单星号在后）*\n</code></pre><p><em>斜体效果（单下划线）</em></p>\n<pre><code>_斜体效果（单下划线）_\n</code></pre><h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><p>英文输入法下面三个下划线<code>___</code> ,必须单独成行</p>\n<hr>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><blockquote>\n<p>引用效果</p>\n<blockquote>\n<p>引用中的引用</p>\n<blockquote>\n<p>引用中的引用中的引用</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<pre><code>` &gt; 引用效果\n  &gt;&gt; 引用中的引用\n  &gt;&gt;&gt;引用中的引用中的引用\n</code></pre><h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><h1 id=\"大标题（标题下面三个-）\"><a href=\"#大标题（标题下面三个-）\" class=\"headerlink\" title=\"大标题（标题下面三个=）\"></a>大标题（标题下面三个=）</h1><pre><code>大标题（标题下面三个=）\n===\n</code></pre><h2 id=\"小标题（标题下面三个-）\"><a href=\"#小标题（标题下面三个-）\" class=\"headerlink\" title=\"小标题（标题下面三个-）\"></a>小标题（标题下面三个-）</h2><pre><code>小标题（标题下面三个-）\n---\n</code></pre><h1 id=\"一级标题（-）\"><a href=\"#一级标题（-）\" class=\"headerlink\" title=\"一级标题（#）\"></a>一级标题（#）</h1><h2 id=\"二级标题-（-）\"><a href=\"#二级标题-（-）\" class=\"headerlink\" title=\"二级标题 （##）\"></a>二级标题 （##）</h2><h3 id=\"三级标题-（-）\"><a href=\"#三级标题-（-）\" class=\"headerlink\" title=\"三级标题 （###）\"></a>三级标题 （###）</h3><h4 id=\"四级标题-（-）\"><a href=\"#四级标题-（-）\" class=\"headerlink\" title=\"四级标题 （####）\"></a>四级标题 （####）</h4><h5 id=\"五级标题-（-）\"><a href=\"#五级标题-（-）\" class=\"headerlink\" title=\"五级标题 （#####）\"></a>五级标题 （#####）</h5><h6 id=\"六级标题-（-）\"><a href=\"#六级标题-（-）\" class=\"headerlink\" title=\"六级标题 （######）\"></a>六级标题 （######）</h6><h3 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h3><ul>\n<li>无序列表（符号之后有空格）<code>- 无序列表（符号之后有空格</code></li>\n</ul>\n<ul>\n<li>无序列表 （- <em> +都可以） `</em> 无序列表(- * +都可以)`</li>\n</ul>\n<ul>\n<li>无序列表   <code>+ 无序列表</code></li>\n</ul>\n<h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><ol>\n<li>有序列表</li>\n<li>有序列表</li>\n<li>有序列表</li>\n</ol>\n<h3 id=\"嵌套列表\"><a href=\"#嵌套列表\" class=\"headerlink\" title=\"嵌套列表\"></a>嵌套列表</h3><ul>\n<li>嵌套列表（+*-可循环使用）<ul>\n<li>嵌套列表</li>\n<li>嵌套列表<ul>\n<li>嵌套列表</li>\n<li>嵌套列表</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文字超链接\"><a href=\"#文字超链接\" class=\"headerlink\" title=\"文字超链接\"></a>文字超链接</h3><p><a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"external\">百度</a></p>\n<pre><code>[百度](http://www.baidu.com)\n[百度](http://www.baidu.com &quot;百度&quot;)\n</code></pre><h3 id=\"图片超链接\"><a href=\"#图片超链接\" class=\"headerlink\" title=\"图片超链接\"></a>图片超链接</h3><p><img src=\"http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png\" alt=\"GitHub Mark\" title=\"GitHub Mark\"><br>Tooltips可省略，要设置大小只能借助HTML标记</p>\n<h3 id=\"索引超链接\"><a href=\"#索引超链接\" class=\"headerlink\" title=\"索引超链接\"></a>索引超链接</h3><p><a href=\"http://notes.stepway.me\" target=\"_blank\" rel=\"external\">Stepway’s Notes</a><br><img src=\"http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png\" alt=\"GitHub Octocat\"></p>\n<h3 id=\"自动链接\"><a href=\"#自动链接\" class=\"headerlink\" title=\"自动链接\"></a>自动链接</h3><p><a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"external\">http://www.baidu.com</a></p>\n<pre><code>&lt;http://www.baidu.com&gt;\n</code></pre><h3 id=\"行内代码\"><a href=\"#行内代码\" class=\"headerlink\" title=\"行内代码\"></a>行内代码</h3><p><code>var a = &#39;hello world&#39;</code></p>\n<pre><code>`var b = &apos;hello Markdown&apos;`\n</code></pre><h3 id=\"段落代码\"><a href=\"#段落代码\" class=\"headerlink\" title=\"段落代码\"></a>段落代码</h3><pre><code>四个空格或者一个tab键\nvar a = ’hello world‘\nvar b = &apos;hello Markdown&apos;\n</code></pre><h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><h3 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h3><h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"强调效果\"><a href=\"#强调效果\" class=\"headerlink\" title=\"强调效果\"></a>强调效果</h3><p><strong>粗体效果（双星号）</strong>  <strong>粗体效果（双下划线）</strong></p>\n<pre><code>**粗体效果（双星号）**  __粗体效果（双下划线）__\n</code></pre><p><em>斜体效果（单星号在前）斜体效果（单星号在后）</em></p>\n<pre><code>*斜体效果（单星号在前）斜体效果（单星号在后）*\n</code></pre><p><em>斜体效果（单下划线）</em></p>\n<pre><code>_斜体效果（单下划线）_\n</code></pre><h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><p>英文输入法下面三个下划线<code>___</code> ,必须单独成行</p>\n<hr>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><blockquote>\n<p>引用效果</p>\n<blockquote>\n<p>引用中的引用</p>\n<blockquote>\n<p>引用中的引用中的引用</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<pre><code>` &gt; 引用效果\n  &gt;&gt; 引用中的引用\n  &gt;&gt;&gt;引用中的引用中的引用\n</code></pre><h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><h1 id=\"大标题（标题下面三个-）\"><a href=\"#大标题（标题下面三个-）\" class=\"headerlink\" title=\"大标题（标题下面三个=）\"></a>大标题（标题下面三个=）</h1><pre><code>大标题（标题下面三个=）\n===\n</code></pre><h2 id=\"小标题（标题下面三个-）\"><a href=\"#小标题（标题下面三个-）\" class=\"headerlink\" title=\"小标题（标题下面三个-）\"></a>小标题（标题下面三个-）</h2><pre><code>小标题（标题下面三个-）\n---\n</code></pre><h1 id=\"一级标题（-）\"><a href=\"#一级标题（-）\" class=\"headerlink\" title=\"一级标题（#）\"></a>一级标题（#）</h1><h2 id=\"二级标题-（-）\"><a href=\"#二级标题-（-）\" class=\"headerlink\" title=\"二级标题 （##）\"></a>二级标题 （##）</h2><h3 id=\"三级标题-（-）\"><a href=\"#三级标题-（-）\" class=\"headerlink\" title=\"三级标题 （###）\"></a>三级标题 （###）</h3><h4 id=\"四级标题-（-）\"><a href=\"#四级标题-（-）\" class=\"headerlink\" title=\"四级标题 （####）\"></a>四级标题 （####）</h4><h5 id=\"五级标题-（-）\"><a href=\"#五级标题-（-）\" class=\"headerlink\" title=\"五级标题 （#####）\"></a>五级标题 （#####）</h5><h6 id=\"六级标题-（-）\"><a href=\"#六级标题-（-）\" class=\"headerlink\" title=\"六级标题 （######）\"></a>六级标题 （######）</h6><h3 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h3><ul>\n<li>无序列表（符号之后有空格）<code>- 无序列表（符号之后有空格</code></li>\n</ul>\n<ul>\n<li>无序列表 （- <em> +都可以） `</em> 无序列表(- * +都可以)`</li>\n</ul>\n<ul>\n<li>无序列表   <code>+ 无序列表</code></li>\n</ul>\n<h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><ol>\n<li>有序列表</li>\n<li>有序列表</li>\n<li>有序列表</li>\n</ol>\n<h3 id=\"嵌套列表\"><a href=\"#嵌套列表\" class=\"headerlink\" title=\"嵌套列表\"></a>嵌套列表</h3><ul>\n<li>嵌套列表（+*-可循环使用）<ul>\n<li>嵌套列表</li>\n<li>嵌套列表<ul>\n<li>嵌套列表</li>\n<li>嵌套列表</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文字超链接\"><a href=\"#文字超链接\" class=\"headerlink\" title=\"文字超链接\"></a>文字超链接</h3><p><a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"external\">百度</a></p>\n<pre><code>[百度](http://www.baidu.com)\n[百度](http://www.baidu.com &quot;百度&quot;)\n</code></pre><h3 id=\"图片超链接\"><a href=\"#图片超链接\" class=\"headerlink\" title=\"图片超链接\"></a>图片超链接</h3><p><img src=\"http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png\" alt=\"GitHub Mark\" title=\"GitHub Mark\"><br>Tooltips可省略，要设置大小只能借助HTML标记</p>\n<h3 id=\"索引超链接\"><a href=\"#索引超链接\" class=\"headerlink\" title=\"索引超链接\"></a>索引超链接</h3><p><a href=\"http://notes.stepway.me\" target=\"_blank\" rel=\"external\">Stepway’s Notes</a><br><img src=\"http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png\" alt=\"GitHub Octocat\"></p>\n<h3 id=\"自动链接\"><a href=\"#自动链接\" class=\"headerlink\" title=\"自动链接\"></a>自动链接</h3><p><a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"external\">http://www.baidu.com</a></p>\n<pre><code>&lt;http://www.baidu.com&gt;\n</code></pre><h3 id=\"行内代码\"><a href=\"#行内代码\" class=\"headerlink\" title=\"行内代码\"></a>行内代码</h3><p><code>var a = &#39;hello world&#39;</code></p>\n<pre><code>`var b = &apos;hello Markdown&apos;`\n</code></pre><h3 id=\"段落代码\"><a href=\"#段落代码\" class=\"headerlink\" title=\"段落代码\"></a>段落代码</h3><pre><code>四个空格或者一个tab键\nvar a = ’hello world‘\nvar b = &apos;hello Markdown&apos;\n</code></pre><h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><h3 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h3><h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3>"},{"title":"React生命周期","_content":"**使用ES6语法**\n### 初始化阶段\n#### constructor\n\n\tconstructor(props) {\n\t  super(props); //必须的，否则 this.props will be undefined\n\t  this.state = {\n\t    color: props.initialColor\n\t  };\n\t}\n用来初始化state，绑定一些方法（bind methods）\n<!-- more -->\n#### componentWillMount\n在render之前调用,可以在这个方法里面调用 setState 改变状态，并且不会导致额外调用一次 render\n#### render() （必须的）\n* 只能访问this.props和this.state,只能有一个顶层组件\n* 也可以返回 null 或者 false，这时候 ReactDOM.findDOMNode(this) 会返回 null\n*  shouldComponentUpdate() 返回false时不会调用render()\n*  不允许修改状态和DOM输出\n\n#### componentDidMount()\nrender之后调用，可以通过 ReactDOM.findDOMNode(this) 获取到组件的 DOM 节点。如果需要从后端获取数据渲染页面可以在这里操作，setState将会触发render重新渲染。\n### 更新组件触发\n更新props或者state都会更新组件\n#### componentWillReceiveProps\n\tcomponentWillReceiveProps(nextProps)\n接收到新的props将触发此方法\n可以通过比较`this.props`和`nextProps`来\n#### shouldComponentUpdate\n\tshouldComponentUpdate(nextProps, nextState)\n默认返回ture，返回false的时候，而后的componentWillUpdate(),render(),和 componentDidUpdate()将不会被调用\n不过根据react官网，未来返回false可能仍然使得组件重渲。\n目前在项目中用到的不多。\n#### componentWillUpdate\n\tcomponentWillUpdate(nextProps, nextState)\n当接收到新的props和state，`componentWillUpdate`将在`render`之前被立即调用\n>不能在这调用this.setState()，若你需要更新状态响应属性的调整，使用`componentWillReceiveProps()`代替。\n\n#### componentDidUpdate\n`componentDidUpdate`会在更新发生后立即被调用\n当组件被更新时，使用该方法是操作DOM的一次机会。这也是一个适合发送请求的地方，要是你对比了当前属性和之前属性\n### 卸载组件触发\n#### componentWillUnmount\n`componentWillUnmount`在组件被卸载和销毁之前立刻调用\n### 综上\n#### 生命周期函数\n装载组件触发\n>constructor()\ncomponentWillMount()\nrender()\ncomponentDidMount()\n\n更新组件触发\n>componentWillReceiveProps()\nshouldComponentUpdate()\ncomponentWillUpdate()\nrender()\ncomponentDidUpdate()\n\n卸载组件触发\n>componentWillUnmount()\n\n### 类属性\n#### defaultProps\n用来设置默认属性\n\n**非使用ES6语法**\n<https://facebook.github.io/react/docs/react-without-es6.html>\n不打算使用 ES6，你也可以使用`create-react-class`模块来创建\n\n\tvar createReactClass = require('create-react-class');\n\tvar Greeting = createReactClass({\n\t  render: function() {\n\t    return <h1>Hello, {this.props.name}</h1>;\n\t  }\n\t});\n\n如果使用 `createReactClass` 方法创建组件，那就需要在参数对象中定义 `getDefaultProps` 方法，并且在这个方法中返回包含自定义属性的对象,定义`getInitialState` 方法，并让这个方法返回你要定义的初始属性\n","source":"_posts/2017-06-09-React生命周期.md","raw":"---\ntitle:  \"React生命周期\"\ntag: React\n---\n**使用ES6语法**\n### 初始化阶段\n#### constructor\n\n\tconstructor(props) {\n\t  super(props); //必须的，否则 this.props will be undefined\n\t  this.state = {\n\t    color: props.initialColor\n\t  };\n\t}\n用来初始化state，绑定一些方法（bind methods）\n<!-- more -->\n#### componentWillMount\n在render之前调用,可以在这个方法里面调用 setState 改变状态，并且不会导致额外调用一次 render\n#### render() （必须的）\n* 只能访问this.props和this.state,只能有一个顶层组件\n* 也可以返回 null 或者 false，这时候 ReactDOM.findDOMNode(this) 会返回 null\n*  shouldComponentUpdate() 返回false时不会调用render()\n*  不允许修改状态和DOM输出\n\n#### componentDidMount()\nrender之后调用，可以通过 ReactDOM.findDOMNode(this) 获取到组件的 DOM 节点。如果需要从后端获取数据渲染页面可以在这里操作，setState将会触发render重新渲染。\n### 更新组件触发\n更新props或者state都会更新组件\n#### componentWillReceiveProps\n\tcomponentWillReceiveProps(nextProps)\n接收到新的props将触发此方法\n可以通过比较`this.props`和`nextProps`来\n#### shouldComponentUpdate\n\tshouldComponentUpdate(nextProps, nextState)\n默认返回ture，返回false的时候，而后的componentWillUpdate(),render(),和 componentDidUpdate()将不会被调用\n不过根据react官网，未来返回false可能仍然使得组件重渲。\n目前在项目中用到的不多。\n#### componentWillUpdate\n\tcomponentWillUpdate(nextProps, nextState)\n当接收到新的props和state，`componentWillUpdate`将在`render`之前被立即调用\n>不能在这调用this.setState()，若你需要更新状态响应属性的调整，使用`componentWillReceiveProps()`代替。\n\n#### componentDidUpdate\n`componentDidUpdate`会在更新发生后立即被调用\n当组件被更新时，使用该方法是操作DOM的一次机会。这也是一个适合发送请求的地方，要是你对比了当前属性和之前属性\n### 卸载组件触发\n#### componentWillUnmount\n`componentWillUnmount`在组件被卸载和销毁之前立刻调用\n### 综上\n#### 生命周期函数\n装载组件触发\n>constructor()\ncomponentWillMount()\nrender()\ncomponentDidMount()\n\n更新组件触发\n>componentWillReceiveProps()\nshouldComponentUpdate()\ncomponentWillUpdate()\nrender()\ncomponentDidUpdate()\n\n卸载组件触发\n>componentWillUnmount()\n\n### 类属性\n#### defaultProps\n用来设置默认属性\n\n**非使用ES6语法**\n<https://facebook.github.io/react/docs/react-without-es6.html>\n不打算使用 ES6，你也可以使用`create-react-class`模块来创建\n\n\tvar createReactClass = require('create-react-class');\n\tvar Greeting = createReactClass({\n\t  render: function() {\n\t    return <h1>Hello, {this.props.name}</h1>;\n\t  }\n\t});\n\n如果使用 `createReactClass` 方法创建组件，那就需要在参数对象中定义 `getDefaultProps` 方法，并且在这个方法中返回包含自定义属性的对象,定义`getInitialState` 方法，并让这个方法返回你要定义的初始属性\n","slug":"2017-06-09-React生命周期","published":1,"date":"2017-06-09T07:54:16.000Z","updated":"2017-06-09T07:54:16.000Z","_id":"cj3pb2k8x00078ms6k04vcjy9","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>使用ES6语法</strong></p>\n<h3 id=\"初始化阶段\"><a href=\"#初始化阶段\" class=\"headerlink\" title=\"初始化阶段\"></a>初始化阶段</h3><h4 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h4><pre><code>constructor(props) {\n  super(props); //必须的，否则 this.props will be undefined\n  this.state = {\n    color: props.initialColor\n  };\n}\n</code></pre><p>用来初始化state，绑定一些方法（bind methods）<br><a id=\"more\"></a></p>\n<h4 id=\"componentWillMount\"><a href=\"#componentWillMount\" class=\"headerlink\" title=\"componentWillMount\"></a>componentWillMount</h4><p>在render之前调用,可以在这个方法里面调用 setState 改变状态，并且不会导致额外调用一次 render</p>\n<h4 id=\"render-（必须的）\"><a href=\"#render-（必须的）\" class=\"headerlink\" title=\"render() （必须的）\"></a>render() （必须的）</h4><ul>\n<li>只能访问this.props和this.state,只能有一个顶层组件</li>\n<li>也可以返回 null 或者 false，这时候 ReactDOM.findDOMNode(this) 会返回 null</li>\n<li>shouldComponentUpdate() 返回false时不会调用render()</li>\n<li>不允许修改状态和DOM输出</li>\n</ul>\n<h4 id=\"componentDidMount\"><a href=\"#componentDidMount\" class=\"headerlink\" title=\"componentDidMount()\"></a>componentDidMount()</h4><p>render之后调用，可以通过 ReactDOM.findDOMNode(this) 获取到组件的 DOM 节点。如果需要从后端获取数据渲染页面可以在这里操作，setState将会触发render重新渲染。</p>\n<h3 id=\"更新组件触发\"><a href=\"#更新组件触发\" class=\"headerlink\" title=\"更新组件触发\"></a>更新组件触发</h3><p>更新props或者state都会更新组件</p>\n<h4 id=\"componentWillReceiveProps\"><a href=\"#componentWillReceiveProps\" class=\"headerlink\" title=\"componentWillReceiveProps\"></a>componentWillReceiveProps</h4><pre><code>componentWillReceiveProps(nextProps)\n</code></pre><p>接收到新的props将触发此方法<br>可以通过比较<code>this.props</code>和<code>nextProps</code>来</p>\n<h4 id=\"shouldComponentUpdate\"><a href=\"#shouldComponentUpdate\" class=\"headerlink\" title=\"shouldComponentUpdate\"></a>shouldComponentUpdate</h4><pre><code>shouldComponentUpdate(nextProps, nextState)\n</code></pre><p>默认返回ture，返回false的时候，而后的componentWillUpdate(),render(),和 componentDidUpdate()将不会被调用<br>不过根据react官网，未来返回false可能仍然使得组件重渲。<br>目前在项目中用到的不多。</p>\n<h4 id=\"componentWillUpdate\"><a href=\"#componentWillUpdate\" class=\"headerlink\" title=\"componentWillUpdate\"></a>componentWillUpdate</h4><pre><code>componentWillUpdate(nextProps, nextState)\n</code></pre><p>当接收到新的props和state，<code>componentWillUpdate</code>将在<code>render</code>之前被立即调用</p>\n<blockquote>\n<p>不能在这调用this.setState()，若你需要更新状态响应属性的调整，使用<code>componentWillReceiveProps()</code>代替。</p>\n</blockquote>\n<h4 id=\"componentDidUpdate\"><a href=\"#componentDidUpdate\" class=\"headerlink\" title=\"componentDidUpdate\"></a>componentDidUpdate</h4><p><code>componentDidUpdate</code>会在更新发生后立即被调用<br>当组件被更新时，使用该方法是操作DOM的一次机会。这也是一个适合发送请求的地方，要是你对比了当前属性和之前属性</p>\n<h3 id=\"卸载组件触发\"><a href=\"#卸载组件触发\" class=\"headerlink\" title=\"卸载组件触发\"></a>卸载组件触发</h3><h4 id=\"componentWillUnmount\"><a href=\"#componentWillUnmount\" class=\"headerlink\" title=\"componentWillUnmount\"></a>componentWillUnmount</h4><p><code>componentWillUnmount</code>在组件被卸载和销毁之前立刻调用</p>\n<h3 id=\"综上\"><a href=\"#综上\" class=\"headerlink\" title=\"综上\"></a>综上</h3><h4 id=\"生命周期函数\"><a href=\"#生命周期函数\" class=\"headerlink\" title=\"生命周期函数\"></a>生命周期函数</h4><p>装载组件触发</p>\n<blockquote>\n<p>constructor()<br>componentWillMount()<br>render()<br>componentDidMount()</p>\n</blockquote>\n<p>更新组件触发</p>\n<blockquote>\n<p>componentWillReceiveProps()<br>shouldComponentUpdate()<br>componentWillUpdate()<br>render()<br>componentDidUpdate()</p>\n</blockquote>\n<p>卸载组件触发</p>\n<blockquote>\n<p>componentWillUnmount()</p>\n</blockquote>\n<h3 id=\"类属性\"><a href=\"#类属性\" class=\"headerlink\" title=\"类属性\"></a>类属性</h3><h4 id=\"defaultProps\"><a href=\"#defaultProps\" class=\"headerlink\" title=\"defaultProps\"></a>defaultProps</h4><p>用来设置默认属性</p>\n<p><strong>非使用ES6语法</strong><br><a href=\"https://facebook.github.io/react/docs/react-without-es6.html\" target=\"_blank\" rel=\"external\">https://facebook.github.io/react/docs/react-without-es6.html</a><br>不打算使用 ES6，你也可以使用<code>create-react-class</code>模块来创建</p>\n<pre><code>var createReactClass = require(&apos;create-react-class&apos;);\nvar Greeting = createReactClass({\n  render: function() {\n    return &lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;;\n  }\n});\n</code></pre><p>如果使用 <code>createReactClass</code> 方法创建组件，那就需要在参数对象中定义 <code>getDefaultProps</code> 方法，并且在这个方法中返回包含自定义属性的对象,定义<code>getInitialState</code> 方法，并让这个方法返回你要定义的初始属性</p>\n","site":{"data":{}},"excerpt":"<p><strong>使用ES6语法</strong></p>\n<h3 id=\"初始化阶段\"><a href=\"#初始化阶段\" class=\"headerlink\" title=\"初始化阶段\"></a>初始化阶段</h3><h4 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h4><pre><code>constructor(props) {\n  super(props); //必须的，否则 this.props will be undefined\n  this.state = {\n    color: props.initialColor\n  };\n}\n</code></pre><p>用来初始化state，绑定一些方法（bind methods）<br>","more":"</p>\n<h4 id=\"componentWillMount\"><a href=\"#componentWillMount\" class=\"headerlink\" title=\"componentWillMount\"></a>componentWillMount</h4><p>在render之前调用,可以在这个方法里面调用 setState 改变状态，并且不会导致额外调用一次 render</p>\n<h4 id=\"render-（必须的）\"><a href=\"#render-（必须的）\" class=\"headerlink\" title=\"render() （必须的）\"></a>render() （必须的）</h4><ul>\n<li>只能访问this.props和this.state,只能有一个顶层组件</li>\n<li>也可以返回 null 或者 false，这时候 ReactDOM.findDOMNode(this) 会返回 null</li>\n<li>shouldComponentUpdate() 返回false时不会调用render()</li>\n<li>不允许修改状态和DOM输出</li>\n</ul>\n<h4 id=\"componentDidMount\"><a href=\"#componentDidMount\" class=\"headerlink\" title=\"componentDidMount()\"></a>componentDidMount()</h4><p>render之后调用，可以通过 ReactDOM.findDOMNode(this) 获取到组件的 DOM 节点。如果需要从后端获取数据渲染页面可以在这里操作，setState将会触发render重新渲染。</p>\n<h3 id=\"更新组件触发\"><a href=\"#更新组件触发\" class=\"headerlink\" title=\"更新组件触发\"></a>更新组件触发</h3><p>更新props或者state都会更新组件</p>\n<h4 id=\"componentWillReceiveProps\"><a href=\"#componentWillReceiveProps\" class=\"headerlink\" title=\"componentWillReceiveProps\"></a>componentWillReceiveProps</h4><pre><code>componentWillReceiveProps(nextProps)\n</code></pre><p>接收到新的props将触发此方法<br>可以通过比较<code>this.props</code>和<code>nextProps</code>来</p>\n<h4 id=\"shouldComponentUpdate\"><a href=\"#shouldComponentUpdate\" class=\"headerlink\" title=\"shouldComponentUpdate\"></a>shouldComponentUpdate</h4><pre><code>shouldComponentUpdate(nextProps, nextState)\n</code></pre><p>默认返回ture，返回false的时候，而后的componentWillUpdate(),render(),和 componentDidUpdate()将不会被调用<br>不过根据react官网，未来返回false可能仍然使得组件重渲。<br>目前在项目中用到的不多。</p>\n<h4 id=\"componentWillUpdate\"><a href=\"#componentWillUpdate\" class=\"headerlink\" title=\"componentWillUpdate\"></a>componentWillUpdate</h4><pre><code>componentWillUpdate(nextProps, nextState)\n</code></pre><p>当接收到新的props和state，<code>componentWillUpdate</code>将在<code>render</code>之前被立即调用</p>\n<blockquote>\n<p>不能在这调用this.setState()，若你需要更新状态响应属性的调整，使用<code>componentWillReceiveProps()</code>代替。</p>\n</blockquote>\n<h4 id=\"componentDidUpdate\"><a href=\"#componentDidUpdate\" class=\"headerlink\" title=\"componentDidUpdate\"></a>componentDidUpdate</h4><p><code>componentDidUpdate</code>会在更新发生后立即被调用<br>当组件被更新时，使用该方法是操作DOM的一次机会。这也是一个适合发送请求的地方，要是你对比了当前属性和之前属性</p>\n<h3 id=\"卸载组件触发\"><a href=\"#卸载组件触发\" class=\"headerlink\" title=\"卸载组件触发\"></a>卸载组件触发</h3><h4 id=\"componentWillUnmount\"><a href=\"#componentWillUnmount\" class=\"headerlink\" title=\"componentWillUnmount\"></a>componentWillUnmount</h4><p><code>componentWillUnmount</code>在组件被卸载和销毁之前立刻调用</p>\n<h3 id=\"综上\"><a href=\"#综上\" class=\"headerlink\" title=\"综上\"></a>综上</h3><h4 id=\"生命周期函数\"><a href=\"#生命周期函数\" class=\"headerlink\" title=\"生命周期函数\"></a>生命周期函数</h4><p>装载组件触发</p>\n<blockquote>\n<p>constructor()<br>componentWillMount()<br>render()<br>componentDidMount()</p>\n</blockquote>\n<p>更新组件触发</p>\n<blockquote>\n<p>componentWillReceiveProps()<br>shouldComponentUpdate()<br>componentWillUpdate()<br>render()<br>componentDidUpdate()</p>\n</blockquote>\n<p>卸载组件触发</p>\n<blockquote>\n<p>componentWillUnmount()</p>\n</blockquote>\n<h3 id=\"类属性\"><a href=\"#类属性\" class=\"headerlink\" title=\"类属性\"></a>类属性</h3><h4 id=\"defaultProps\"><a href=\"#defaultProps\" class=\"headerlink\" title=\"defaultProps\"></a>defaultProps</h4><p>用来设置默认属性</p>\n<p><strong>非使用ES6语法</strong><br><a href=\"https://facebook.github.io/react/docs/react-without-es6.html\" target=\"_blank\" rel=\"external\">https://facebook.github.io/react/docs/react-without-es6.html</a><br>不打算使用 ES6，你也可以使用<code>create-react-class</code>模块来创建</p>\n<pre><code>var createReactClass = require(&apos;create-react-class&apos;);\nvar Greeting = createReactClass({\n  render: function() {\n    return &lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;;\n  }\n});\n</code></pre><p>如果使用 <code>createReactClass</code> 方法创建组件，那就需要在参数对象中定义 <code>getDefaultProps</code> 方法，并且在这个方法中返回包含自定义属性的对象,定义<code>getInitialState</code> 方法，并让这个方法返回你要定义的初始属性</p>"},{"title":"gulp的使用","_content":"gulp，自动化的构建工具增加工作流程。gulp.js是基于Node.js构建的，利用Node.js流的威力，快速构建项目并减少频繁的io操作。\n<!-- more --> \n### gulp.src(globs[,options)\n 输出符合所提供的匹配模式或者匹配模式数组的文件。\n  {% codeblock %}\n     gulp.src([ ‘./src/js/**/*.js',\n      ‘!./src/js/templates', \n      ‘!./src/js/?(build|examples|server|src-test|resources)/**/**',\n      ‘!./src/{component,component/**}' ])\n {% endcodeblock %}\n忽略文件夹：`‘!./src/{component,component/**}’` 可以忽略掉component文件夹和component文件夹里面的东西。（也可以写成‘!./src/component{,/\\*\\*}’）\n>‘!./src/component/**’只能忽略掉component文件夹里面的东西，不能忽略掉文件夹本身。\n\nGulp内部使用了node-glob模块来实现其文件匹配功能,用到的glob的匹配规则以及一些文件匹配技巧如下。\n- \\* 匹配文件路径中的0个或多个字符，但不会匹配路径分隔符，除非路径分隔符出现在末尾\n- \\** 匹配路径中的0个或多个目录及其子目录,需要单独出现，即它左右不能有其他东西了。如果出现在末尾，也能匹配文件。\n- ? 匹配文件路径中的一个字符(不会匹配路径分隔符)\n- [...] 匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为^或!时，则表示不匹配方括号中出现的其他字符中的任意一个，类似js正则表达式中的用法\n- !(pattern|pattern|pattern) 匹配任何与括号中给定的任一模式都不匹配的\n- ?(pattern|pattern|pattern) 匹配括号中给定的任一模式0次或1次，类似于js正则中的(pattern|pattern|pattern)?\n- +(pattern|pattern|pattern) 匹配括号中给定的任一模式至少1次，类似于js正则中的(pattern|pattern|pattern)+\n- *(pattern|pattern|pattern) 匹配括号中给定的任一模式0次或多次，类似于js正则中的(pattern|pattern|pattern)*\n- @(pattern|pattern|pattern) 匹配括号中给定的任一模式1次，类似于js正则中的(pattern|pattern|pattern)\n\n下面以一系列例子来加深理解\n\n- \\* 能匹配 a.js,x.y,abc,abc/,但不能匹配a/b.js\n- \\*\\.\\* 能匹配 a.js,style.css,a.b,x.y\n- \\*/\\*/\\*.js 能匹配 a/b/c.js,x/y/z.js,不能匹配a/b.js,a/b/c/d.js\n- ** 能匹配 abc,a/b.js,a/b/c.js,x/y/z,x/y/z/a.b,能用来匹配所有的目录和文件\n- **/*.js 能匹配 foo.js,a/foo.js,a/b/foo.js,a/b/c/foo.js\n- a/**/z 能匹配 a/z,a/b/z,a/b/c/z,a/d/g/h/j/k/z\n- a/\\*\\*b/z 能匹配 a/b/z,a/sb/z,但不能匹配a/x/sb/z,因为只有单**单独出现才能匹配多级目录\n- ?.js 能匹配 a.js,b.js,c.js\n- a?? 能匹配 a.b,abc,但不能匹配ab/,因为它不会匹配路径分隔符\n- [xyz].js 只能匹配 x.js,y.js,z.js,不会匹配xy.js,xyz.js等,整个中括号只代表一个字符\n- [^xyz].js 能匹配 a.js,b.js,c.js等,不能匹配x.js,y.js,z.js\n\n[参考资料](http://www.cnblogs.com/2050/p/4198792.html)\n### gulp.dest(path[, options])\n 写入文件, 作为pipe的一个流程.文件夹不存在时会被自动创建.\n### gulp.task(name[, deps], fn)\n 定义一个任务,声明它的名称, 任务依赖, 和任务内容.\n gulp中的任务是异步运行的，gulp便默认将并行所有的任务。\n {% codeblock %}\n gulp.task('release', ['clean', 'minify'], function(){\n    // do stuff\n \n });\n {% endcodeblock %}\n \n 如果希望任务T2在T1之后运行，那么：\n \n 1 在 T1 中返回 Promise、Stream 类型的值，或者接受一个 callback 回调函数作为参数\n 2 在 T2 的声明中定义 T1 为其依赖\n {% codeblock %}\n gulp.task('clean', function(){\n     return gulp.src(\"./dist/**/*.js\", { read: false }).pipe(rimraf());\n });\n \n gulp.task('minify', ['clean'], function(){\n     return  gulp.src('./js/**/*.js').pipe(uglify()).pipe(gulp.dest(\"./dist/js\"));\n });\n gulp.task('release', ['clean', 'minify'], function(){\n    // do stuff\n \n });\n {% endcodeblock %}\n \n 弊端：\n \n minify 任务现在依赖了 clean 任务，而它的业务原本是不依赖 clean 的——我们只是为了“屈从 Gulp 的设计”才定义了这样的依赖关系。这种在 minify 中隐式包含 clean 的做法有时候会带来麻烦。比如，你在执行的时候，确实只是需要执行一个 minify，怎么办？那时，你就需要定义一个专门的 minify-only\n 那么，怎样才能“优雅地”逐个同步地运行 Gulp 任务呢？\n  **run-sequence可以按顺序地运行多个或多组任务；**\n  {% codeblock %}\n  var runSequence = require('run-sequence');\n  gulp.task('default', function(callback) {\n      runSequence('clean',\n          ['less', 'scripts'],\n          'watch',\n          callback);\n  });\n  {% endcodeblock %}\n  在上述代码中，clean 先于所有其他任务运行，在 clean 完成后，less 与 scripts 同时运行；在 less 与 scripts 都运行完成之后，watch 最后运行。并且，在 watch 运行完毕后，会调用 callback，以通知 Gulp 引擎。\n  [参考链接](https://blog.jijiechen.com/post/run-gulp-tasks-and-steps-synchronously)\n  ###gulp.watch(glob [, opts], tasks)\n  监控文件,执行任务.\n  \n>  常用插件集合\n\n  压缩图片\n  https://www.npmjs.com/package/gulp-imagemin\n  自动生成文件版本\n  https://github.com/sindresorhus/gulp-rev\n  使用gulp压缩js\n  https://github.com/nimojs/gulp-book/blob/master/chapter2.md\n   ","source":"_posts/gulp的使用.md","raw":"---\ntitle:  \"gulp的使用\"\ntag: gulp\n---\ngulp，自动化的构建工具增加工作流程。gulp.js是基于Node.js构建的，利用Node.js流的威力，快速构建项目并减少频繁的io操作。\n<!-- more --> \n### gulp.src(globs[,options)\n 输出符合所提供的匹配模式或者匹配模式数组的文件。\n  {% codeblock %}\n     gulp.src([ ‘./src/js/**/*.js',\n      ‘!./src/js/templates', \n      ‘!./src/js/?(build|examples|server|src-test|resources)/**/**',\n      ‘!./src/{component,component/**}' ])\n {% endcodeblock %}\n忽略文件夹：`‘!./src/{component,component/**}’` 可以忽略掉component文件夹和component文件夹里面的东西。（也可以写成‘!./src/component{,/\\*\\*}’）\n>‘!./src/component/**’只能忽略掉component文件夹里面的东西，不能忽略掉文件夹本身。\n\nGulp内部使用了node-glob模块来实现其文件匹配功能,用到的glob的匹配规则以及一些文件匹配技巧如下。\n- \\* 匹配文件路径中的0个或多个字符，但不会匹配路径分隔符，除非路径分隔符出现在末尾\n- \\** 匹配路径中的0个或多个目录及其子目录,需要单独出现，即它左右不能有其他东西了。如果出现在末尾，也能匹配文件。\n- ? 匹配文件路径中的一个字符(不会匹配路径分隔符)\n- [...] 匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为^或!时，则表示不匹配方括号中出现的其他字符中的任意一个，类似js正则表达式中的用法\n- !(pattern|pattern|pattern) 匹配任何与括号中给定的任一模式都不匹配的\n- ?(pattern|pattern|pattern) 匹配括号中给定的任一模式0次或1次，类似于js正则中的(pattern|pattern|pattern)?\n- +(pattern|pattern|pattern) 匹配括号中给定的任一模式至少1次，类似于js正则中的(pattern|pattern|pattern)+\n- *(pattern|pattern|pattern) 匹配括号中给定的任一模式0次或多次，类似于js正则中的(pattern|pattern|pattern)*\n- @(pattern|pattern|pattern) 匹配括号中给定的任一模式1次，类似于js正则中的(pattern|pattern|pattern)\n\n下面以一系列例子来加深理解\n\n- \\* 能匹配 a.js,x.y,abc,abc/,但不能匹配a/b.js\n- \\*\\.\\* 能匹配 a.js,style.css,a.b,x.y\n- \\*/\\*/\\*.js 能匹配 a/b/c.js,x/y/z.js,不能匹配a/b.js,a/b/c/d.js\n- ** 能匹配 abc,a/b.js,a/b/c.js,x/y/z,x/y/z/a.b,能用来匹配所有的目录和文件\n- **/*.js 能匹配 foo.js,a/foo.js,a/b/foo.js,a/b/c/foo.js\n- a/**/z 能匹配 a/z,a/b/z,a/b/c/z,a/d/g/h/j/k/z\n- a/\\*\\*b/z 能匹配 a/b/z,a/sb/z,但不能匹配a/x/sb/z,因为只有单**单独出现才能匹配多级目录\n- ?.js 能匹配 a.js,b.js,c.js\n- a?? 能匹配 a.b,abc,但不能匹配ab/,因为它不会匹配路径分隔符\n- [xyz].js 只能匹配 x.js,y.js,z.js,不会匹配xy.js,xyz.js等,整个中括号只代表一个字符\n- [^xyz].js 能匹配 a.js,b.js,c.js等,不能匹配x.js,y.js,z.js\n\n[参考资料](http://www.cnblogs.com/2050/p/4198792.html)\n### gulp.dest(path[, options])\n 写入文件, 作为pipe的一个流程.文件夹不存在时会被自动创建.\n### gulp.task(name[, deps], fn)\n 定义一个任务,声明它的名称, 任务依赖, 和任务内容.\n gulp中的任务是异步运行的，gulp便默认将并行所有的任务。\n {% codeblock %}\n gulp.task('release', ['clean', 'minify'], function(){\n    // do stuff\n \n });\n {% endcodeblock %}\n \n 如果希望任务T2在T1之后运行，那么：\n \n 1 在 T1 中返回 Promise、Stream 类型的值，或者接受一个 callback 回调函数作为参数\n 2 在 T2 的声明中定义 T1 为其依赖\n {% codeblock %}\n gulp.task('clean', function(){\n     return gulp.src(\"./dist/**/*.js\", { read: false }).pipe(rimraf());\n });\n \n gulp.task('minify', ['clean'], function(){\n     return  gulp.src('./js/**/*.js').pipe(uglify()).pipe(gulp.dest(\"./dist/js\"));\n });\n gulp.task('release', ['clean', 'minify'], function(){\n    // do stuff\n \n });\n {% endcodeblock %}\n \n 弊端：\n \n minify 任务现在依赖了 clean 任务，而它的业务原本是不依赖 clean 的——我们只是为了“屈从 Gulp 的设计”才定义了这样的依赖关系。这种在 minify 中隐式包含 clean 的做法有时候会带来麻烦。比如，你在执行的时候，确实只是需要执行一个 minify，怎么办？那时，你就需要定义一个专门的 minify-only\n 那么，怎样才能“优雅地”逐个同步地运行 Gulp 任务呢？\n  **run-sequence可以按顺序地运行多个或多组任务；**\n  {% codeblock %}\n  var runSequence = require('run-sequence');\n  gulp.task('default', function(callback) {\n      runSequence('clean',\n          ['less', 'scripts'],\n          'watch',\n          callback);\n  });\n  {% endcodeblock %}\n  在上述代码中，clean 先于所有其他任务运行，在 clean 完成后，less 与 scripts 同时运行；在 less 与 scripts 都运行完成之后，watch 最后运行。并且，在 watch 运行完毕后，会调用 callback，以通知 Gulp 引擎。\n  [参考链接](https://blog.jijiechen.com/post/run-gulp-tasks-and-steps-synchronously)\n  ###gulp.watch(glob [, opts], tasks)\n  监控文件,执行任务.\n  \n>  常用插件集合\n\n  压缩图片\n  https://www.npmjs.com/package/gulp-imagemin\n  自动生成文件版本\n  https://github.com/sindresorhus/gulp-rev\n  使用gulp压缩js\n  https://github.com/nimojs/gulp-book/blob/master/chapter2.md\n   ","slug":"gulp的使用","published":1,"date":"2017-03-07T02:18:01.000Z","updated":"2017-03-07T02:18:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3pb2k9100088ms6dxoeifc3","content":"<p>gulp，自动化的构建工具增加工作流程。gulp.js是基于Node.js构建的，利用Node.js流的威力，快速构建项目并减少频繁的io操作。<br><a id=\"more\"></a> </p>\n<h3 id=\"gulp-src-globs-options\"><a href=\"#gulp-src-globs-options\" class=\"headerlink\" title=\"gulp.src(globs[,options)\"></a>gulp.src(globs[,options)</h3><p> 输出符合所提供的匹配模式或者匹配模式数组的文件。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.src([ ‘./src/js/**/*.js&apos;,</div><div class=\"line\"> ‘!./src/js/templates&apos;, </div><div class=\"line\"> ‘!./src/js/?(build|examples|server|src-test|resources)/**/**&apos;,</div><div class=\"line\"> ‘!./src/&#123;component,component/**&#125;&apos; ])</div><div class=\"line\"> </div></pre></td></tr></table></figure><br>忽略文件夹：<code>‘!./src/{component,component/**}’</code> 可以忽略掉component文件夹和component文件夹里面的东西。（也可以写成‘!./src/component{,/**}’）</p>\n<blockquote>\n<p>‘!./src/component/**’只能忽略掉component文件夹里面的东西，不能忽略掉文件夹本身。</p>\n</blockquote>\n<p>Gulp内部使用了node-glob模块来实现其文件匹配功能,用到的glob的匹配规则以及一些文件匹配技巧如下。</p>\n<ul>\n<li>* 匹配文件路径中的0个或多个字符，但不会匹配路径分隔符，除非路径分隔符出现在末尾</li>\n<li>** 匹配路径中的0个或多个目录及其子目录,需要单独出现，即它左右不能有其他东西了。如果出现在末尾，也能匹配文件。</li>\n<li>? 匹配文件路径中的一个字符(不会匹配路径分隔符)</li>\n<li>[…] 匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为^或!时，则表示不匹配方括号中出现的其他字符中的任意一个，类似js正则表达式中的用法</li>\n<li>!(pattern|pattern|pattern) 匹配任何与括号中给定的任一模式都不匹配的</li>\n<li>?(pattern|pattern|pattern) 匹配括号中给定的任一模式0次或1次，类似于js正则中的(pattern|pattern|pattern)?</li>\n<li>+(pattern|pattern|pattern) 匹配括号中给定的任一模式至少1次，类似于js正则中的(pattern|pattern|pattern)+</li>\n<li><em>(pattern|pattern|pattern) 匹配括号中给定的任一模式0次或多次，类似于js正则中的(pattern|pattern|pattern)</em></li>\n<li>@(pattern|pattern|pattern) 匹配括号中给定的任一模式1次，类似于js正则中的(pattern|pattern|pattern)</li>\n</ul>\n<p>下面以一系列例子来加深理解</p>\n<ul>\n<li>* 能匹配 a.js,x.y,abc,abc/,但不能匹配a/b.js</li>\n<li>*.* 能匹配 a.js,style.css,a.b,x.y</li>\n<li>*/*/*.js 能匹配 a/b/c.js,x/y/z.js,不能匹配a/b.js,a/b/c/d.js</li>\n<li>** 能匹配 abc,a/b.js,a/b/c.js,x/y/z,x/y/z/a.b,能用来匹配所有的目录和文件</li>\n<li><em>*/</em>.js 能匹配 foo.js,a/foo.js,a/b/foo.js,a/b/c/foo.js</li>\n<li>a/**/z 能匹配 a/z,a/b/z,a/b/c/z,a/d/g/h/j/k/z</li>\n<li>a/**b/z 能匹配 a/b/z,a/sb/z,但不能匹配a/x/sb/z,因为只有单**单独出现才能匹配多级目录</li>\n<li>?.js 能匹配 a.js,b.js,c.js</li>\n<li>a?? 能匹配 a.b,abc,但不能匹配ab/,因为它不会匹配路径分隔符</li>\n<li>[xyz].js 只能匹配 x.js,y.js,z.js,不会匹配xy.js,xyz.js等,整个中括号只代表一个字符</li>\n<li>[^xyz].js 能匹配 a.js,b.js,c.js等,不能匹配x.js,y.js,z.js</li>\n</ul>\n<p><a href=\"http://www.cnblogs.com/2050/p/4198792.html\" target=\"_blank\" rel=\"external\">参考资料</a></p>\n<h3 id=\"gulp-dest-path-options\"><a href=\"#gulp-dest-path-options\" class=\"headerlink\" title=\"gulp.dest(path[, options])\"></a>gulp.dest(path[, options])</h3><p> 写入文件, 作为pipe的一个流程.文件夹不存在时会被自动创建.</p>\n<h3 id=\"gulp-task-name-deps-fn\"><a href=\"#gulp-task-name-deps-fn\" class=\"headerlink\" title=\"gulp.task(name[, deps], fn)\"></a>gulp.task(name[, deps], fn)</h3><p> 定义一个任务,声明它的名称, 任务依赖, 和任务内容.<br> gulp中的任务是异步运行的，gulp便默认将并行所有的任务。<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(&apos;release&apos;, [&apos;clean&apos;, &apos;minify&apos;], function()&#123;</div><div class=\"line\">   // do stuff</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p> 如果希望任务T2在T1之后运行，那么：</p>\n<p> 1 在 T1 中返回 Promise、Stream 类型的值，或者接受一个 callback 回调函数作为参数<br> 2 在 T2 的声明中定义 T1 为其依赖<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(&apos;clean&apos;, function()&#123;</div><div class=\"line\">    return gulp.src(&quot;./dist/**/*.js&quot;, &#123; read: false &#125;).pipe(rimraf());</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(&apos;minify&apos;, [&apos;clean&apos;], function()&#123;</div><div class=\"line\">    return  gulp.src(&apos;./js/**/*.js&apos;).pipe(uglify()).pipe(gulp.dest(&quot;./dist/js&quot;));</div><div class=\"line\">&#125;);</div><div class=\"line\">gulp.task(&apos;release&apos;, [&apos;clean&apos;, &apos;minify&apos;], function()&#123;</div><div class=\"line\">   // do stuff</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p> 弊端：</p>\n<p> minify 任务现在依赖了 clean 任务，而它的业务原本是不依赖 clean 的——我们只是为了“屈从 Gulp 的设计”才定义了这样的依赖关系。这种在 minify 中隐式包含 clean 的做法有时候会带来麻烦。比如，你在执行的时候，确实只是需要执行一个 minify，怎么办？那时，你就需要定义一个专门的 minify-only<br> 那么，怎样才能“优雅地”逐个同步地运行 Gulp 任务呢？<br>  <strong>run-sequence可以按顺序地运行多个或多组任务；</strong><br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var runSequence = require(&apos;run-sequence&apos;);</div><div class=\"line\">gulp.task(&apos;default&apos;, function(callback) &#123;</div><div class=\"line\">    runSequence(&apos;clean&apos;,</div><div class=\"line\">        [&apos;less&apos;, &apos;scripts&apos;],</div><div class=\"line\">        &apos;watch&apos;,</div><div class=\"line\">        callback);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><br>  在上述代码中，clean 先于所有其他任务运行，在 clean 完成后，less 与 scripts 同时运行；在 less 与 scripts 都运行完成之后，watch 最后运行。并且，在 watch 运行完毕后，会调用 callback，以通知 Gulp 引擎。<br>  <a href=\"https://blog.jijiechen.com/post/run-gulp-tasks-and-steps-synchronously\" target=\"_blank\" rel=\"external\">参考链接</a></p>\n<p>  ###gulp.watch(glob [, opts], tasks)<br>  监控文件,执行任务.</p>\n<blockquote>\n<p> 常用插件集合</p>\n</blockquote>\n<p>  压缩图片<br>  <a href=\"https://www.npmjs.com/package/gulp-imagemin\" target=\"_blank\" rel=\"external\">https://www.npmjs.com/package/gulp-imagemin</a><br>  自动生成文件版本<br>  <a href=\"https://github.com/sindresorhus/gulp-rev\" target=\"_blank\" rel=\"external\">https://github.com/sindresorhus/gulp-rev</a><br>  使用gulp压缩js<br>  <a href=\"https://github.com/nimojs/gulp-book/blob/master/chapter2.md\" target=\"_blank\" rel=\"external\">https://github.com/nimojs/gulp-book/blob/master/chapter2.md</a></p>\n","site":{"data":{}},"excerpt":"<p>gulp，自动化的构建工具增加工作流程。gulp.js是基于Node.js构建的，利用Node.js流的威力，快速构建项目并减少频繁的io操作。<br>","more":"</p>\n<h3 id=\"gulp-src-globs-options\"><a href=\"#gulp-src-globs-options\" class=\"headerlink\" title=\"gulp.src(globs[,options)\"></a>gulp.src(globs[,options)</h3><p> 输出符合所提供的匹配模式或者匹配模式数组的文件。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.src([ ‘./src/js/**/*.js&apos;,</div><div class=\"line\"> ‘!./src/js/templates&apos;, </div><div class=\"line\"> ‘!./src/js/?(build|examples|server|src-test|resources)/**/**&apos;,</div><div class=\"line\"> ‘!./src/&#123;component,component/**&#125;&apos; ])</div><div class=\"line\"> </div></pre></td></tr></table></figure><br>忽略文件夹：<code>‘!./src/{component,component/**}’</code> 可以忽略掉component文件夹和component文件夹里面的东西。（也可以写成‘!./src/component{,/**}’）</p>\n<blockquote>\n<p>‘!./src/component/**’只能忽略掉component文件夹里面的东西，不能忽略掉文件夹本身。</p>\n</blockquote>\n<p>Gulp内部使用了node-glob模块来实现其文件匹配功能,用到的glob的匹配规则以及一些文件匹配技巧如下。</p>\n<ul>\n<li>* 匹配文件路径中的0个或多个字符，但不会匹配路径分隔符，除非路径分隔符出现在末尾</li>\n<li>** 匹配路径中的0个或多个目录及其子目录,需要单独出现，即它左右不能有其他东西了。如果出现在末尾，也能匹配文件。</li>\n<li>? 匹配文件路径中的一个字符(不会匹配路径分隔符)</li>\n<li>[…] 匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为^或!时，则表示不匹配方括号中出现的其他字符中的任意一个，类似js正则表达式中的用法</li>\n<li>!(pattern|pattern|pattern) 匹配任何与括号中给定的任一模式都不匹配的</li>\n<li>?(pattern|pattern|pattern) 匹配括号中给定的任一模式0次或1次，类似于js正则中的(pattern|pattern|pattern)?</li>\n<li>+(pattern|pattern|pattern) 匹配括号中给定的任一模式至少1次，类似于js正则中的(pattern|pattern|pattern)+</li>\n<li><em>(pattern|pattern|pattern) 匹配括号中给定的任一模式0次或多次，类似于js正则中的(pattern|pattern|pattern)</em></li>\n<li>@(pattern|pattern|pattern) 匹配括号中给定的任一模式1次，类似于js正则中的(pattern|pattern|pattern)</li>\n</ul>\n<p>下面以一系列例子来加深理解</p>\n<ul>\n<li>* 能匹配 a.js,x.y,abc,abc/,但不能匹配a/b.js</li>\n<li>*.* 能匹配 a.js,style.css,a.b,x.y</li>\n<li>*/*/*.js 能匹配 a/b/c.js,x/y/z.js,不能匹配a/b.js,a/b/c/d.js</li>\n<li>** 能匹配 abc,a/b.js,a/b/c.js,x/y/z,x/y/z/a.b,能用来匹配所有的目录和文件</li>\n<li><em>*/</em>.js 能匹配 foo.js,a/foo.js,a/b/foo.js,a/b/c/foo.js</li>\n<li>a/**/z 能匹配 a/z,a/b/z,a/b/c/z,a/d/g/h/j/k/z</li>\n<li>a/**b/z 能匹配 a/b/z,a/sb/z,但不能匹配a/x/sb/z,因为只有单**单独出现才能匹配多级目录</li>\n<li>?.js 能匹配 a.js,b.js,c.js</li>\n<li>a?? 能匹配 a.b,abc,但不能匹配ab/,因为它不会匹配路径分隔符</li>\n<li>[xyz].js 只能匹配 x.js,y.js,z.js,不会匹配xy.js,xyz.js等,整个中括号只代表一个字符</li>\n<li>[^xyz].js 能匹配 a.js,b.js,c.js等,不能匹配x.js,y.js,z.js</li>\n</ul>\n<p><a href=\"http://www.cnblogs.com/2050/p/4198792.html\" target=\"_blank\" rel=\"external\">参考资料</a></p>\n<h3 id=\"gulp-dest-path-options\"><a href=\"#gulp-dest-path-options\" class=\"headerlink\" title=\"gulp.dest(path[, options])\"></a>gulp.dest(path[, options])</h3><p> 写入文件, 作为pipe的一个流程.文件夹不存在时会被自动创建.</p>\n<h3 id=\"gulp-task-name-deps-fn\"><a href=\"#gulp-task-name-deps-fn\" class=\"headerlink\" title=\"gulp.task(name[, deps], fn)\"></a>gulp.task(name[, deps], fn)</h3><p> 定义一个任务,声明它的名称, 任务依赖, 和任务内容.<br> gulp中的任务是异步运行的，gulp便默认将并行所有的任务。<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(&apos;release&apos;, [&apos;clean&apos;, &apos;minify&apos;], function()&#123;</div><div class=\"line\">   // do stuff</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p> 如果希望任务T2在T1之后运行，那么：</p>\n<p> 1 在 T1 中返回 Promise、Stream 类型的值，或者接受一个 callback 回调函数作为参数<br> 2 在 T2 的声明中定义 T1 为其依赖<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(&apos;clean&apos;, function()&#123;</div><div class=\"line\">    return gulp.src(&quot;./dist/**/*.js&quot;, &#123; read: false &#125;).pipe(rimraf());</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(&apos;minify&apos;, [&apos;clean&apos;], function()&#123;</div><div class=\"line\">    return  gulp.src(&apos;./js/**/*.js&apos;).pipe(uglify()).pipe(gulp.dest(&quot;./dist/js&quot;));</div><div class=\"line\">&#125;);</div><div class=\"line\">gulp.task(&apos;release&apos;, [&apos;clean&apos;, &apos;minify&apos;], function()&#123;</div><div class=\"line\">   // do stuff</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p> 弊端：</p>\n<p> minify 任务现在依赖了 clean 任务，而它的业务原本是不依赖 clean 的——我们只是为了“屈从 Gulp 的设计”才定义了这样的依赖关系。这种在 minify 中隐式包含 clean 的做法有时候会带来麻烦。比如，你在执行的时候，确实只是需要执行一个 minify，怎么办？那时，你就需要定义一个专门的 minify-only<br> 那么，怎样才能“优雅地”逐个同步地运行 Gulp 任务呢？<br>  <strong>run-sequence可以按顺序地运行多个或多组任务；</strong><br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var runSequence = require(&apos;run-sequence&apos;);</div><div class=\"line\">gulp.task(&apos;default&apos;, function(callback) &#123;</div><div class=\"line\">    runSequence(&apos;clean&apos;,</div><div class=\"line\">        [&apos;less&apos;, &apos;scripts&apos;],</div><div class=\"line\">        &apos;watch&apos;,</div><div class=\"line\">        callback);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><br>  在上述代码中，clean 先于所有其他任务运行，在 clean 完成后，less 与 scripts 同时运行；在 less 与 scripts 都运行完成之后，watch 最后运行。并且，在 watch 运行完毕后，会调用 callback，以通知 Gulp 引擎。<br>  <a href=\"https://blog.jijiechen.com/post/run-gulp-tasks-and-steps-synchronously\" target=\"_blank\" rel=\"external\">参考链接</a></p>\n<p>  ###gulp.watch(glob [, opts], tasks)<br>  监控文件,执行任务.</p>\n<blockquote>\n<p> 常用插件集合</p>\n</blockquote>\n<p>  压缩图片<br>  <a href=\"https://www.npmjs.com/package/gulp-imagemin\" target=\"_blank\" rel=\"external\">https://www.npmjs.com/package/gulp-imagemin</a><br>  自动生成文件版本<br>  <a href=\"https://github.com/sindresorhus/gulp-rev\" target=\"_blank\" rel=\"external\">https://github.com/sindresorhus/gulp-rev</a><br>  使用gulp压缩js<br>  <a href=\"https://github.com/nimojs/gulp-book/blob/master/chapter2.md\" target=\"_blank\" rel=\"external\">https://github.com/nimojs/gulp-book/blob/master/chapter2.md</a></p>"},{"title":"全面解析JavaScript中“&&”和“||”操作符","date":"2017-03-06T06:42:36.000Z","_content":"逻辑 \"||\"\n1、只要“||”前面为false,不管“||”后面是true还是false，都返回“||”后面的值。\n2、只要“||”前面为true,不管“||”后面是true还是false，都返回“||”前面的值。\n<!-- more --> \n知道了前面第一个的结果就知道最后的输出，如果为第一个为：true，则取第一个的值，如果第一个为false，则取第二个的值。\n\n>在js逻辑运算中，0、”“、null、false、undefined、NaN都会判为false，其他都为true\n\n逻辑 “&&”\n1、只要“&&”前面是false，无论“&&”后面是true还是false，结果都将返“&&”前面的值;\n2、只要“&&”前面是true，无论“&&”后面是true还是false，结果都将返“&&”后面的值;\ntypeof cb == \"function\" && cb(that.globalData.userInfo)\n当前面为true的时候，执行后面\n\na() && b() :如果执行a()后返回true，则执行b()并返回b的值；如果执行a()后返回false，则整个表达式返回a()的值，b()不执行；\n\na() || b() :如果执行a()后返回true，则整个表达式返回a()的值，b()不执行；如果执行a()后返回false，则执行b()并返回b()的值；\n&& 优先级高于 ||","source":"_posts/全面解析JavaScript中&&和||.md","raw":"---\ntitle: 全面解析JavaScript中“&&”和“||”操作符\ndate: 2017-03-06 14:42:36\ntags: JavaScript\n---\n逻辑 \"||\"\n1、只要“||”前面为false,不管“||”后面是true还是false，都返回“||”后面的值。\n2、只要“||”前面为true,不管“||”后面是true还是false，都返回“||”前面的值。\n<!-- more --> \n知道了前面第一个的结果就知道最后的输出，如果为第一个为：true，则取第一个的值，如果第一个为false，则取第二个的值。\n\n>在js逻辑运算中，0、”“、null、false、undefined、NaN都会判为false，其他都为true\n\n逻辑 “&&”\n1、只要“&&”前面是false，无论“&&”后面是true还是false，结果都将返“&&”前面的值;\n2、只要“&&”前面是true，无论“&&”后面是true还是false，结果都将返“&&”后面的值;\ntypeof cb == \"function\" && cb(that.globalData.userInfo)\n当前面为true的时候，执行后面\n\na() && b() :如果执行a()后返回true，则执行b()并返回b的值；如果执行a()后返回false，则整个表达式返回a()的值，b()不执行；\n\na() || b() :如果执行a()后返回true，则整个表达式返回a()的值，b()不执行；如果执行a()后返回false，则执行b()并返回b()的值；\n&& 优先级高于 ||","slug":"全面解析JavaScript中&&和||","published":1,"updated":"2017-03-06T08:57:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3pb2k9300098ms64ux6z5u9","content":"<p>逻辑 “||”<br>1、只要“||”前面为false,不管“||”后面是true还是false，都返回“||”后面的值。<br>2、只要“||”前面为true,不管“||”后面是true还是false，都返回“||”前面的值。<br><a id=\"more\"></a><br>知道了前面第一个的结果就知道最后的输出，如果为第一个为：true，则取第一个的值，如果第一个为false，则取第二个的值。</p>\n<blockquote>\n<p>在js逻辑运算中，0、”“、null、false、undefined、NaN都会判为false，其他都为true</p>\n</blockquote>\n<p>逻辑 “&amp;&amp;”<br>1、只要“&amp;&amp;”前面是false，无论“&amp;&amp;”后面是true还是false，结果都将返“&amp;&amp;”前面的值;<br>2、只要“&amp;&amp;”前面是true，无论“&amp;&amp;”后面是true还是false，结果都将返“&amp;&amp;”后面的值;<br>typeof cb == “function” &amp;&amp; cb(that.globalData.userInfo)<br>当前面为true的时候，执行后面</p>\n<p>a() &amp;&amp; b() :如果执行a()后返回true，则执行b()并返回b的值；如果执行a()后返回false，则整个表达式返回a()的值，b()不执行；</p>\n<p>a() || b() :如果执行a()后返回true，则整个表达式返回a()的值，b()不执行；如果执行a()后返回false，则执行b()并返回b()的值；<br>&amp;&amp; 优先级高于 ||</p>\n","site":{"data":{}},"excerpt":"<p>逻辑 “||”<br>1、只要“||”前面为false,不管“||”后面是true还是false，都返回“||”后面的值。<br>2、只要“||”前面为true,不管“||”后面是true还是false，都返回“||”前面的值。<br>","more":"<br>知道了前面第一个的结果就知道最后的输出，如果为第一个为：true，则取第一个的值，如果第一个为false，则取第二个的值。</p>\n<blockquote>\n<p>在js逻辑运算中，0、”“、null、false、undefined、NaN都会判为false，其他都为true</p>\n</blockquote>\n<p>逻辑 “&amp;&amp;”<br>1、只要“&amp;&amp;”前面是false，无论“&amp;&amp;”后面是true还是false，结果都将返“&amp;&amp;”前面的值;<br>2、只要“&amp;&amp;”前面是true，无论“&amp;&amp;”后面是true还是false，结果都将返“&amp;&amp;”后面的值;<br>typeof cb == “function” &amp;&amp; cb(that.globalData.userInfo)<br>当前面为true的时候，执行后面</p>\n<p>a() &amp;&amp; b() :如果执行a()后返回true，则执行b()并返回b的值；如果执行a()后返回false，则整个表达式返回a()的值，b()不执行；</p>\n<p>a() || b() :如果执行a()后返回true，则整个表达式返回a()的值，b()不执行；如果执行a()后返回false，则执行b()并返回b()的值；<br>&amp;&amp; 优先级高于 ||</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj3pb2k7r00008ms6bsj0r89i","tag_id":"cj3pb2k7y00028ms6e1bmsmb5","_id":"cj3pb2k8200048ms6ru9k7cdz"},{"post_id":"cj3pb2k7w00018ms63wc7ygbp","tag_id":"cj3pb2k8100038ms6fiv2j7xf","_id":"cj3pb2k8300058ms6jwegb9wr"},{"post_id":"cj3pb2k9100088ms6dxoeifc3","tag_id":"cj3pb2k95000a8ms6rdt756pj","_id":"cj3pb2k96000c8ms6au8f2k0v"},{"post_id":"cj3pb2k9300098ms64ux6z5u9","tag_id":"cj3pb2k96000b8ms68wz5yslk","_id":"cj3pb2k97000d8ms6meymdig6"},{"post_id":"cj3pb2k8x00078ms6k04vcjy9","tag_id":"cj3pb5z4h000f8ms6onn9u91c","_id":"cj3pb5z4i000g8ms684uvy9ht"}],"Tag":[{"name":"Linux","_id":"cj3pb2k7y00028ms6e1bmsmb5"},{"name":"Mac","_id":"cj3pb2k8100038ms6fiv2j7xf"},{"name":"gulp","_id":"cj3pb2k95000a8ms6rdt756pj"},{"name":"JavaScript","_id":"cj3pb2k96000b8ms68wz5yslk"},{"name":"React","_id":"cj3pb5z4h000f8ms6onn9u91c"}]}}